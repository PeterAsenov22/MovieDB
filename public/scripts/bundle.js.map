{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/alt/lib/actions/index.js","node_modules/alt/lib/functions.js","node_modules/alt/lib/index.js","node_modules/alt/lib/store/AltStore.js","node_modules/alt/lib/store/StoreMixin.js","node_modules/alt/lib/store/index.js","node_modules/alt/lib/utils/AltUtils.js","node_modules/alt/lib/utils/StateFunctions.js","node_modules/deep-equal/index.js","node_modules/deep-equal/lib/is_arguments.js","node_modules/deep-equal/lib/keys.js","node_modules/flux/index.js","node_modules/flux/lib/Dispatcher.js","node_modules/flux/node_modules/fbjs/lib/invariant.js","node_modules/history/lib/Actions.js","node_modules/history/lib/AsyncUtils.js","node_modules/history/lib/DOMStateStorage.js","node_modules/history/lib/DOMUtils.js","node_modules/history/lib/ExecutionEnvironment.js","node_modules/history/lib/createBrowserHistory.js","node_modules/history/lib/createDOMHistory.js","node_modules/history/lib/createHistory.js","node_modules/history/lib/createLocation.js","node_modules/history/lib/deprecate.js","node_modules/history/lib/extractPath.js","node_modules/history/lib/parsePath.js","node_modules/history/lib/runTransitionHook.js","node_modules/invariant/browser.js","node_modules/is-promise/index.js","node_modules/process/browser.js","node_modules/transmitter/dist/transmitter.js","node_modules/warning/browser.js","source/client/actions/FormActions.js","source/client/actions/MovieActions.js","source/client/actions/MovieAddActions.js","source/client/actions/NavbarActions.js","source/client/actions/UserActions.js","source/client/alt.js","source/client/components/App.js","source/client/components/Footer.js","source/client/components/Home.js","source/client/components/MovieAdd.js","source/client/components/Navbar.js","source/client/components/UserLogin.js","source/client/components/UserProfile.js","source/client/components/UserRegister.js","source/client/components/form/CommentForm.js","source/client/components/form/Form.js","source/client/components/form/RadioElement.js","source/client/components/form/RadioGroup.js","source/client/components/form/Submit.js","source/client/components/form/TextGroup.js","source/client/components/sub-components/MovieCard.js","source/client/components/sub-components/MovieCardInfo.js","source/client/components/sub-components/MovieCardPoster.js","source/client/components/sub-components/MovieCommentsPanel.js","source/client/components/sub-components/MoviePanelToggles.js","source/client/components/sub-components/MovieVotePanel.js","source/client/components/sub-components/NavbarUserMenu.js","source/client/components/sub-components/UserInfo.js","source/client/components/sub-components/UserRatedMovies.js","source/client/components/sub-components/UserRatedMoviesPanel.js","source/client/components/sub-components/UserReviews.js","source/client/components/sub-components/UserReviewsPanel.js","source/client/main.js","source/client/routes.js","source/client/stores/FormStore.js","source/client/stores/MovieAddStore.js","source/client/stores/MovieStore.js","source/client/stores/NavbarStore.js","source/client/stores/UserStore.js","source/client/utilities/Authorize.js","source/client/utilities/Helpers.js","source/client/utilities/RequesterTMDB.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxjnpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvptOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACjxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnDA;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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = makeAction;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _AltUtils = require('../utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _isPromise = require('is-promise');\n\nvar _isPromise2 = _interopRequireDefault(_isPromise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction makeAction(alt, namespace, name, implementation, obj) {\n  var id = utils.uid(alt._actionsRegistry, String(namespace) + '.' + String(name));\n  alt._actionsRegistry[id] = 1;\n\n  var data = { id: id, namespace: namespace, name: name };\n\n  var dispatch = function dispatch(payload) {\n    return alt.dispatch(id, payload, data);\n  };\n\n  // the action itself\n  var action = function action() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var invocationResult = implementation.apply(obj, args);\n    var actionResult = invocationResult;\n\n    // async functions that return promises should not be dispatched\n    if (invocationResult !== undefined && !(0, _isPromise2['default'])(invocationResult)) {\n      if (fn.isFunction(invocationResult)) {\n        // inner function result should be returned as an action result\n        actionResult = invocationResult(dispatch, alt);\n      } else {\n        dispatch(invocationResult);\n      }\n    }\n\n    if (invocationResult === undefined) {\n      utils.warn('An action was called but nothing was dispatched');\n    }\n\n    return actionResult;\n  };\n  action.defer = function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return setTimeout(function () {\n      return action.apply(null, args);\n    });\n  };\n  action.id = id;\n  action.data = data;\n\n  // ensure each reference is unique in the namespace\n  var container = alt.actions[namespace];\n  var namespaceId = utils.uid(container, name);\n  container[namespaceId] = action;\n\n  // generate a constant\n  var constant = utils.formatAsConstant(namespaceId);\n  container[constant] = id;\n\n  return action;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isMutableObject = isMutableObject;\nexports.eachObject = eachObject;\nexports.assign = assign;\nvar isFunction = exports.isFunction = function isFunction(x) {\n  return typeof x === 'function';\n};\n\nfunction isMutableObject(target) {\n  var Ctor = target.constructor;\n\n  return !!target && Object.prototype.toString.call(target) === '[object Object]' && isFunction(Ctor) && !Object.isFrozen(target) && (Ctor instanceof Ctor || target.type === 'AltStore');\n}\n\nfunction eachObject(f, o) {\n  o.forEach(function (from) {\n    Object.keys(Object(from)).forEach(function (key) {\n      f(key, from[key]);\n    });\n  });\n}\n\nfunction assign(target) {\n  for (var _len = arguments.length, source = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    source[_key - 1] = arguments[_key];\n  }\n\n  eachObject(function (key, value) {\n    return target[key] = value;\n  }, source);\n  return target;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _flux = require('flux');\n\nvar _StateFunctions = require('./utils/StateFunctions');\n\nvar StateFunctions = _interopRequireWildcard(_StateFunctions);\n\nvar _functions = require('./functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _store = require('./store');\n\nvar store = _interopRequireWildcard(_store);\n\nvar _AltUtils = require('./utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _actions = require('./actions');\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /* global window */\n\n\nvar Alt = function () {\n  function Alt() {\n    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, Alt);\n\n    this.config = config;\n    this.serialize = config.serialize || JSON.stringify;\n    this.deserialize = config.deserialize || JSON.parse;\n    this.dispatcher = config.dispatcher || new _flux.Dispatcher();\n    this.batchingFunction = config.batchingFunction || function (callback) {\n      return callback();\n    };\n    this.actions = { global: {} };\n    this.stores = {};\n    this.storeTransforms = config.storeTransforms || [];\n    this.trapAsync = false;\n    this._actionsRegistry = {};\n    this._initSnapshot = {};\n    this._lastSnapshot = {};\n  }\n\n  Alt.prototype.dispatch = function () {\n    function dispatch(action, data, details) {\n      var _this = this;\n\n      this.batchingFunction(function () {\n        var id = Math.random().toString(18).substr(2, 16);\n\n        // support straight dispatching of FSA-style actions\n        if (action.hasOwnProperty('type') && action.hasOwnProperty('payload')) {\n          var fsaDetails = {\n            id: action.type,\n            namespace: action.type,\n            name: action.type\n          };\n          return _this.dispatcher.dispatch(utils.fsa(id, action.type, action.payload, fsaDetails));\n        }\n\n        if (action.id && action.dispatch) {\n          return utils.dispatch(id, action, data, _this);\n        }\n\n        return _this.dispatcher.dispatch(utils.fsa(id, action, data, details));\n      });\n    }\n\n    return dispatch;\n  }();\n\n  Alt.prototype.createUnsavedStore = function () {\n    function createUnsavedStore(StoreModel) {\n      var key = StoreModel.displayName || '';\n      store.createStoreConfig(this.config, StoreModel);\n      var Store = store.transformStore(this.storeTransforms, StoreModel);\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);\n    }\n\n    return createUnsavedStore;\n  }();\n\n  Alt.prototype.createStore = function () {\n    function createStore(StoreModel, iden) {\n      var key = iden || StoreModel.displayName || StoreModel.name || '';\n      store.createStoreConfig(this.config, StoreModel);\n      var Store = store.transformStore(this.storeTransforms, StoreModel);\n\n      /* istanbul ignore next */\n      if (module.hot) delete this.stores[key];\n\n      if (this.stores[key] || !key) {\n        if (this.stores[key]) {\n          utils.warn('A store named ' + String(key) + ' already exists, double check your store ' + 'names or pass in your own custom identifier for each store');\n        } else {\n          utils.warn('Store name was not specified');\n        }\n\n        key = utils.uid(this.stores, key);\n      }\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      var storeInstance = fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);\n\n      this.stores[key] = storeInstance;\n      StateFunctions.saveInitialSnapshot(this, key);\n\n      return storeInstance;\n    }\n\n    return createStore;\n  }();\n\n  Alt.prototype.generateActions = function () {\n    function generateActions() {\n      var actions = { name: 'global' };\n\n      for (var _len3 = arguments.length, actionNames = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        actionNames[_key3] = arguments[_key3];\n      }\n\n      return this.createActions(actionNames.reduce(function (obj, action) {\n        obj[action] = utils.dispatchIdentity;\n        return obj;\n      }, actions));\n    }\n\n    return generateActions;\n  }();\n\n  Alt.prototype.createAction = function () {\n    function createAction(name, implementation, obj) {\n      return (0, _actions2['default'])(this, 'global', name, implementation, obj);\n    }\n\n    return createAction;\n  }();\n\n  Alt.prototype.createActions = function () {\n    function createActions(ActionsClass) {\n      var _this3 = this;\n\n      var exportObj = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var actions = {};\n      var key = utils.uid(this._actionsRegistry, ActionsClass.displayName || ActionsClass.name || 'Unknown');\n\n      if (fn.isFunction(ActionsClass)) {\n        fn.assign(actions, utils.getPrototypeChain(ActionsClass));\n\n        var ActionsGenerator = function (_ActionsClass) {\n          _inherits(ActionsGenerator, _ActionsClass);\n\n          function ActionsGenerator() {\n            _classCallCheck(this, ActionsGenerator);\n\n            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              args[_key5] = arguments[_key5];\n            }\n\n            return _possibleConstructorReturn(this, _ActionsClass.call.apply(_ActionsClass, [this].concat(args)));\n          }\n\n          ActionsGenerator.prototype.generateActions = function () {\n            function generateActions() {\n              for (var _len6 = arguments.length, actionNames = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n                actionNames[_key6] = arguments[_key6];\n              }\n\n              actionNames.forEach(function (actionName) {\n                actions[actionName] = utils.dispatchIdentity;\n              });\n            }\n\n            return generateActions;\n          }();\n\n          return ActionsGenerator;\n        }(ActionsClass);\n\n        for (var _len4 = arguments.length, argsForConstructor = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n          argsForConstructor[_key4 - 2] = arguments[_key4];\n        }\n\n        fn.assign(actions, new (Function.prototype.bind.apply(ActionsGenerator, [null].concat(argsForConstructor)))());\n      } else {\n        fn.assign(actions, ActionsClass);\n      }\n\n      this.actions[key] = this.actions[key] || {};\n\n      fn.eachObject(function (actionName, action) {\n        if (!fn.isFunction(action)) {\n          exportObj[actionName] = action;\n          return;\n        }\n\n        // create the action\n        exportObj[actionName] = (0, _actions2['default'])(_this3, key, actionName, action, exportObj);\n\n        // generate a constant\n        var constant = utils.formatAsConstant(actionName);\n        exportObj[constant] = exportObj[actionName].id;\n      }, [actions]);\n\n      return exportObj;\n    }\n\n    return createActions;\n  }();\n\n  Alt.prototype.takeSnapshot = function () {\n    function takeSnapshot() {\n      for (var _len7 = arguments.length, storeNames = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        storeNames[_key7] = arguments[_key7];\n      }\n\n      var state = StateFunctions.snapshot(this, storeNames);\n      fn.assign(this._lastSnapshot, state);\n      return this.serialize(state);\n    }\n\n    return takeSnapshot;\n  }();\n\n  Alt.prototype.rollback = function () {\n    function rollback() {\n      StateFunctions.setAppState(this, this.serialize(this._lastSnapshot), function (storeInst) {\n        storeInst.lifecycle('rollback');\n        storeInst.emitChange();\n      });\n    }\n\n    return rollback;\n  }();\n\n  Alt.prototype.recycle = function () {\n    function recycle() {\n      for (var _len8 = arguments.length, storeNames = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        storeNames[_key8] = arguments[_key8];\n      }\n\n      var initialSnapshot = storeNames.length ? StateFunctions.filterSnapshots(this, this._initSnapshot, storeNames) : this._initSnapshot;\n\n      StateFunctions.setAppState(this, this.serialize(initialSnapshot), function (storeInst) {\n        storeInst.lifecycle('init');\n        storeInst.emitChange();\n      });\n    }\n\n    return recycle;\n  }();\n\n  Alt.prototype.flush = function () {\n    function flush() {\n      var state = this.serialize(StateFunctions.snapshot(this));\n      this.recycle();\n      return state;\n    }\n\n    return flush;\n  }();\n\n  Alt.prototype.bootstrap = function () {\n    function bootstrap(data) {\n      StateFunctions.setAppState(this, data, function (storeInst, state) {\n        storeInst.lifecycle('bootstrap', state);\n        storeInst.emitChange();\n      });\n    }\n\n    return bootstrap;\n  }();\n\n  Alt.prototype.prepare = function () {\n    function prepare(storeInst, payload) {\n      var data = {};\n      if (!storeInst.displayName) {\n        throw new ReferenceError('Store provided does not have a name');\n      }\n      data[storeInst.displayName] = payload;\n      return this.serialize(data);\n    }\n\n    return prepare;\n  }();\n\n  // Instance type methods for injecting alt into your application as context\n\n  Alt.prototype.addActions = function () {\n    function addActions(name, ActionsClass) {\n      for (var _len9 = arguments.length, args = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n        args[_key9 - 2] = arguments[_key9];\n      }\n\n      this.actions[name] = Array.isArray(ActionsClass) ? this.generateActions.apply(this, ActionsClass) : this.createActions.apply(this, [ActionsClass].concat(args));\n    }\n\n    return addActions;\n  }();\n\n  Alt.prototype.addStore = function () {\n    function addStore(name, StoreModel) {\n      for (var _len10 = arguments.length, args = Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {\n        args[_key10 - 2] = arguments[_key10];\n      }\n\n      this.createStore.apply(this, [StoreModel, name].concat(args));\n    }\n\n    return addStore;\n  }();\n\n  Alt.prototype.getActions = function () {\n    function getActions(name) {\n      return this.actions[name];\n    }\n\n    return getActions;\n  }();\n\n  Alt.prototype.getStore = function () {\n    function getStore(name) {\n      return this.stores[name];\n    }\n\n    return getStore;\n  }();\n\n  Alt.debug = function () {\n    function debug(name, alt, win) {\n      var key = 'alt.js.org';\n      var context = win;\n      if (!context && typeof window !== 'undefined') {\n        context = window;\n      }\n      if (typeof context !== 'undefined') {\n        context[key] = context[key] || [];\n        context[key].push({ name: name, alt: alt });\n      }\n      return alt;\n    }\n\n    return debug;\n  }();\n\n  return Alt;\n}();\n\nexports['default'] = Alt;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _transmitter = require('transmitter');\n\nvar _transmitter2 = _interopRequireDefault(_transmitter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar AltStore = function () {\n  function AltStore(alt, model, state, StoreModel) {\n    var _this = this;\n\n    _classCallCheck(this, AltStore);\n\n    var lifecycleEvents = model.lifecycleEvents;\n    this.transmitter = (0, _transmitter2['default'])();\n    this.lifecycle = function (event, x) {\n      if (lifecycleEvents[event]) lifecycleEvents[event].publish(x);\n    };\n    this.state = state;\n\n    this.alt = alt;\n    this.preventDefault = false;\n    this.displayName = model.displayName;\n    this.boundListeners = model.boundListeners;\n    this.StoreModel = StoreModel;\n    this.reduce = model.reduce || function (x) {\n      return x;\n    };\n    this.subscriptions = [];\n\n    var output = model.output || function (x) {\n      return x;\n    };\n\n    this.emitChange = function () {\n      return _this.transmitter.publish(output(_this.state));\n    };\n\n    var handleDispatch = function handleDispatch(f, payload) {\n      try {\n        return f();\n      } catch (e) {\n        if (model.handlesOwnErrors) {\n          _this.lifecycle('error', {\n            error: e,\n            payload: payload,\n            state: _this.state\n          });\n          return false;\n        }\n\n        throw e;\n      }\n    };\n\n    fn.assign(this, model.publicMethods);\n\n    // Register dispatcher\n    this.dispatchToken = alt.dispatcher.register(function (payload) {\n      _this.preventDefault = false;\n\n      _this.lifecycle('beforeEach', {\n        payload: payload,\n        state: _this.state\n      });\n\n      var actionHandlers = model.actionListeners[payload.action];\n\n      if (actionHandlers || model.otherwise) {\n        var result = void 0;\n\n        if (actionHandlers) {\n          result = handleDispatch(function () {\n            return actionHandlers.filter(Boolean).every(function (handler) {\n              return handler.call(model, payload.data, payload.action) !== false;\n            });\n          }, payload);\n        } else {\n          result = handleDispatch(function () {\n            return model.otherwise(payload.data, payload.action);\n          }, payload);\n        }\n\n        if (result !== false && !_this.preventDefault) _this.emitChange();\n      }\n\n      if (model.reduce) {\n        handleDispatch(function () {\n          var value = model.reduce(_this.state, payload);\n          if (value !== undefined) _this.state = value;\n        }, payload);\n        if (!_this.preventDefault) _this.emitChange();\n      }\n\n      _this.lifecycle('afterEach', {\n        payload: payload,\n        state: _this.state\n      });\n    });\n\n    this.lifecycle('init');\n  }\n\n  AltStore.prototype.listen = function () {\n    function listen(cb) {\n      var _this2 = this;\n\n      if (!fn.isFunction(cb)) throw new TypeError('listen expects a function');\n\n      var _transmitter$subscrib = this.transmitter.subscribe(cb);\n\n      var dispose = _transmitter$subscrib.dispose;\n\n      this.subscriptions.push({ cb: cb, dispose: dispose });\n      return function () {\n        _this2.lifecycle('unlisten');\n        dispose();\n      };\n    }\n\n    return listen;\n  }();\n\n  AltStore.prototype.unlisten = function () {\n    function unlisten(cb) {\n      this.lifecycle('unlisten');\n      this.subscriptions.filter(function (subscription) {\n        return subscription.cb === cb;\n      }).forEach(function (subscription) {\n        return subscription.dispose();\n      });\n    }\n\n    return unlisten;\n  }();\n\n  AltStore.prototype.getState = function () {\n    function getState() {\n      return this.StoreModel.config.getState.call(this, this.state);\n    }\n\n    return getState;\n  }();\n\n  return AltStore;\n}();\n\nexports['default'] = AltStore;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _transmitter = require('transmitter');\n\nvar _transmitter2 = _interopRequireDefault(_transmitter);\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar StoreMixin = {\n  waitFor: function () {\n    function waitFor() {\n      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      if (!sources.length) {\n        throw new ReferenceError('Dispatch tokens not provided');\n      }\n\n      var sourcesArray = sources;\n      if (sources.length === 1) {\n        sourcesArray = Array.isArray(sources[0]) ? sources[0] : sources;\n      }\n\n      var tokens = sourcesArray.map(function (source) {\n        return source.dispatchToken || source;\n      });\n\n      this.dispatcher.waitFor(tokens);\n    }\n\n    return waitFor;\n  }(),\n  exportAsync: function () {\n    function exportAsync(asyncMethods) {\n      this.registerAsync(asyncMethods);\n    }\n\n    return exportAsync;\n  }(),\n  registerAsync: function () {\n    function registerAsync(asyncDef) {\n      var _this = this;\n\n      var loadCounter = 0;\n\n      var asyncMethods = fn.isFunction(asyncDef) ? asyncDef(this.alt) : asyncDef;\n\n      var toExport = Object.keys(asyncMethods).reduce(function (publicMethods, methodName) {\n        var desc = asyncMethods[methodName];\n        var spec = fn.isFunction(desc) ? desc(_this) : desc;\n\n        var validHandlers = ['success', 'error', 'loading'];\n        validHandlers.forEach(function (handler) {\n          if (spec[handler] && !spec[handler].id) {\n            throw new Error(String(handler) + ' handler must be an action function');\n          }\n        });\n\n        publicMethods[methodName] = function () {\n          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          var state = _this.getInstance().getState();\n          var value = spec.local && spec.local.apply(spec, [state].concat(args));\n          var shouldFetch = spec.shouldFetch ? spec.shouldFetch.apply(spec, [state].concat(args))\n          /*eslint-disable*/\n          : value == null;\n          /*eslint-enable*/\n          var intercept = spec.interceptResponse || function (x) {\n            return x;\n          };\n\n          var makeActionHandler = function () {\n            function makeActionHandler(action, isError) {\n              return function (x) {\n                var fire = function () {\n                  function fire() {\n                    loadCounter -= 1;\n                    action(intercept(x, action, args));\n                    if (isError) throw x;\n                    return x;\n                  }\n\n                  return fire;\n                }();\n                return _this.alt.trapAsync ? function () {\n                  return fire();\n                } : fire();\n              };\n            }\n\n            return makeActionHandler;\n          }();\n\n          // if we don't have it in cache then fetch it\n          if (shouldFetch) {\n            loadCounter += 1;\n            /* istanbul ignore else */\n            if (spec.loading) spec.loading(intercept(null, spec.loading, args));\n            return spec.remote.apply(spec, [state].concat(args)).then(makeActionHandler(spec.success), makeActionHandler(spec.error, 1));\n          }\n\n          // otherwise emit the change now\n          _this.emitChange();\n          return value;\n        };\n\n        return publicMethods;\n      }, {});\n\n      this.exportPublicMethods(toExport);\n      this.exportPublicMethods({\n        isLoading: function () {\n          function isLoading() {\n            return loadCounter > 0;\n          }\n\n          return isLoading;\n        }()\n      });\n    }\n\n    return registerAsync;\n  }(),\n  exportPublicMethods: function () {\n    function exportPublicMethods(methods) {\n      var _this2 = this;\n\n      fn.eachObject(function (methodName, value) {\n        if (!fn.isFunction(value)) {\n          throw new TypeError('exportPublicMethods expects a function');\n        }\n\n        _this2.publicMethods[methodName] = value;\n      }, [methods]);\n    }\n\n    return exportPublicMethods;\n  }(),\n  emitChange: function () {\n    function emitChange() {\n      this.getInstance().emitChange();\n    }\n\n    return emitChange;\n  }(),\n  on: function () {\n    function on(lifecycleEvent, handler) {\n      if (lifecycleEvent === 'error') this.handlesOwnErrors = true;\n      var bus = this.lifecycleEvents[lifecycleEvent] || (0, _transmitter2['default'])();\n      this.lifecycleEvents[lifecycleEvent] = bus;\n      return bus.subscribe(handler.bind(this));\n    }\n\n    return on;\n  }(),\n  bindAction: function () {\n    function bindAction(symbol, handler) {\n      if (!symbol) {\n        throw new ReferenceError('Invalid action reference passed in');\n      }\n      if (!fn.isFunction(handler)) {\n        throw new TypeError('bindAction expects a function');\n      }\n\n      // You can pass in the constant or the function itself\n      var key = symbol.id ? symbol.id : symbol;\n      this.actionListeners[key] = this.actionListeners[key] || [];\n      this.actionListeners[key].push(handler.bind(this));\n      this.boundListeners.push(key);\n    }\n\n    return bindAction;\n  }(),\n  bindActions: function () {\n    function bindActions(actions) {\n      var _this3 = this;\n\n      fn.eachObject(function (action, symbol) {\n        var matchFirstCharacter = /./;\n        var assumedEventHandler = action.replace(matchFirstCharacter, function (x) {\n          return 'on' + String(x[0].toUpperCase());\n        });\n\n        if (_this3[action] && _this3[assumedEventHandler]) {\n          // If you have both action and onAction\n          throw new ReferenceError('You have multiple action handlers bound to an action: ' + (String(action) + ' and ' + String(assumedEventHandler)));\n        }\n\n        var handler = _this3[action] || _this3[assumedEventHandler];\n        if (handler) {\n          _this3.bindAction(symbol, handler);\n        }\n      }, [actions]);\n    }\n\n    return bindActions;\n  }(),\n  bindListeners: function () {\n    function bindListeners(obj) {\n      var _this4 = this;\n\n      fn.eachObject(function (methodName, symbol) {\n        var listener = _this4[methodName];\n\n        if (!listener) {\n          throw new ReferenceError(String(methodName) + ' defined but does not exist in ' + String(_this4.displayName));\n        }\n\n        if (Array.isArray(symbol)) {\n          symbol.forEach(function (action) {\n            _this4.bindAction(action, listener);\n          });\n        } else {\n          _this4.bindAction(symbol, listener);\n        }\n      }, [obj]);\n    }\n\n    return bindListeners;\n  }()\n};\n\nexports['default'] = StoreMixin;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStoreConfig = createStoreConfig;\nexports.transformStore = transformStore;\nexports.createStoreFromObject = createStoreFromObject;\nexports.createStoreFromClass = createStoreFromClass;\n\nvar _AltUtils = require('../utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _AltStore = require('./AltStore');\n\nvar _AltStore2 = _interopRequireDefault(_AltStore);\n\nvar _StoreMixin = require('./StoreMixin');\n\nvar _StoreMixin2 = _interopRequireDefault(_StoreMixin);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction doSetState(store, storeInstance, state) {\n  if (!state) {\n    return;\n  }\n\n  var config = storeInstance.StoreModel.config;\n\n\n  var nextState = fn.isFunction(state) ? state(storeInstance.state) : state;\n\n  storeInstance.state = config.setState.call(store, storeInstance.state, nextState);\n\n  if (!store.alt.dispatcher.isDispatching()) {\n    store.emitChange();\n  }\n}\n\nfunction createPrototype(proto, alt, key, extras) {\n  return fn.assign(proto, _StoreMixin2['default'], {\n    displayName: key,\n    alt: alt,\n    dispatcher: alt.dispatcher,\n    preventDefault: function () {\n      function preventDefault() {\n        this.getInstance().preventDefault = true;\n      }\n\n      return preventDefault;\n    }(),\n\n    boundListeners: [],\n    lifecycleEvents: {},\n    actionListeners: {},\n    publicMethods: {},\n    handlesOwnErrors: false\n  }, extras);\n}\n\nfunction createStoreConfig(globalConfig, StoreModel) {\n  StoreModel.config = fn.assign({\n    getState: function () {\n      function getState(state) {\n        if (Array.isArray(state)) {\n          return state.slice();\n        } else if (fn.isMutableObject(state)) {\n          return fn.assign({}, state);\n        }\n\n        return state;\n      }\n\n      return getState;\n    }(),\n    setState: function () {\n      function setState(currentState, nextState) {\n        if (fn.isMutableObject(nextState)) {\n          return fn.assign(currentState, nextState);\n        }\n        return nextState;\n      }\n\n      return setState;\n    }()\n  }, globalConfig, StoreModel.config);\n}\n\nfunction transformStore(transforms, StoreModel) {\n  return transforms.reduce(function (Store, transform) {\n    return transform(Store);\n  }, StoreModel);\n}\n\nfunction createStoreFromObject(alt, StoreModel, key) {\n  var storeInstance = void 0;\n\n  var StoreProto = createPrototype({}, alt, key, fn.assign({\n    getInstance: function () {\n      function getInstance() {\n        return storeInstance;\n      }\n\n      return getInstance;\n    }(),\n    setState: function () {\n      function setState(nextState) {\n        doSetState(this, storeInstance, nextState);\n      }\n\n      return setState;\n    }()\n  }, StoreModel));\n\n  // bind the store listeners\n  /* istanbul ignore else */\n  if (StoreProto.bindListeners) {\n    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.bindListeners);\n  }\n  /* istanbul ignore else */\n  if (StoreProto.observe) {\n    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.observe(alt));\n  }\n\n  // bind the lifecycle events\n  /* istanbul ignore else */\n  if (StoreProto.lifecycle) {\n    fn.eachObject(function (eventName, event) {\n      _StoreMixin2['default'].on.call(StoreProto, eventName, event);\n    }, [StoreProto.lifecycle]);\n  }\n\n  // create the instance and fn.assign the public methods to the instance\n  storeInstance = fn.assign(new _AltStore2['default'](alt, StoreProto, StoreProto.state !== undefined ? StoreProto.state : {}, StoreModel), StoreProto.publicMethods, {\n    displayName: key,\n    config: StoreModel.config\n  });\n\n  return storeInstance;\n}\n\nfunction createStoreFromClass(alt, StoreModel, key) {\n  var storeInstance = void 0;\n  var config = StoreModel.config;\n\n  // Creating a class here so we don't overload the provided store's\n  // prototype with the mixin behaviour and I'm extending from StoreModel\n  // so we can inherit any extensions from the provided store.\n\n  var Store = function (_StoreModel) {\n    _inherits(Store, _StoreModel);\n\n    function Store() {\n      _classCallCheck(this, Store);\n\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return _possibleConstructorReturn(this, _StoreModel.call.apply(_StoreModel, [this].concat(args)));\n    }\n\n    return Store;\n  }(StoreModel);\n\n  createPrototype(Store.prototype, alt, key, {\n    type: 'AltStore',\n    getInstance: function () {\n      function getInstance() {\n        return storeInstance;\n      }\n\n      return getInstance;\n    }(),\n    setState: function () {\n      function setState(nextState) {\n        doSetState(this, storeInstance, nextState);\n      }\n\n      return setState;\n    }()\n  });\n\n  for (var _len = arguments.length, argsForClass = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    argsForClass[_key - 3] = arguments[_key];\n  }\n\n  var store = new (Function.prototype.bind.apply(Store, [null].concat(argsForClass)))();\n\n  /* istanbul ignore next */\n  if (config.bindListeners) store.bindListeners(config.bindListeners);\n  /* istanbul ignore next */\n  if (config.datasource) store.registerAsync(config.datasource);\n\n  storeInstance = fn.assign(new _AltStore2['default'](alt, store, store.state !== undefined ? store.state : store, StoreModel), utils.getInternalMethods(StoreModel), config.publicMethods, { displayName: key });\n\n  return storeInstance;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.getInternalMethods = getInternalMethods;\nexports.getPrototypeChain = getPrototypeChain;\nexports.warn = warn;\nexports.uid = uid;\nexports.formatAsConstant = formatAsConstant;\nexports.dispatchIdentity = dispatchIdentity;\nexports.fsa = fsa;\nexports.dispatch = dispatch;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\n/*eslint-disable*/\nvar builtIns = Object.getOwnPropertyNames(NoopClass);\nvar builtInProto = Object.getOwnPropertyNames(NoopClass.prototype);\n/*eslint-enable*/\n\nfunction getInternalMethods(Obj, isProto) {\n  var excluded = isProto ? builtInProto : builtIns;\n  var obj = isProto ? Obj.prototype : Obj;\n  return Object.getOwnPropertyNames(obj).reduce(function (value, m) {\n    if (excluded.indexOf(m) !== -1) {\n      return value;\n    }\n\n    value[m] = obj[m];\n    return value;\n  }, {});\n}\n\nfunction getPrototypeChain(Obj) {\n  var methods = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  return Obj === Function.prototype ? methods : getPrototypeChain(Object.getPrototypeOf(Obj), fn.assign(getInternalMethods(Obj, true), methods));\n}\n\nfunction warn(msg) {\n  /* istanbul ignore else */\n  /*eslint-disable*/\n  if (typeof console !== 'undefined') {\n    console.warn(new ReferenceError(msg));\n  }\n  /*eslint-enable*/\n}\n\nfunction uid(container, name) {\n  var count = 0;\n  var key = name;\n  while (Object.hasOwnProperty.call(container, key)) {\n    key = name + String(++count);\n  }\n  return key;\n}\n\nfunction formatAsConstant(name) {\n  return name.replace(/[a-z]([A-Z])/g, function (i) {\n    return String(i[0]) + '_' + String(i[1].toLowerCase());\n  }).toUpperCase();\n}\n\nfunction dispatchIdentity(x) {\n  if (x === undefined) return null;\n\n  for (var _len = arguments.length, a = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    a[_key - 1] = arguments[_key];\n  }\n\n  return a.length ? [x].concat(a) : x;\n}\n\nfunction fsa(id, type, payload, details) {\n  return {\n    type: type,\n    payload: payload,\n    meta: _extends({\n      dispatchId: id\n    }, details),\n\n    id: id,\n    action: type,\n    data: payload,\n    details: details\n  };\n}\n\nfunction dispatch(id, actionObj, payload, alt) {\n  var data = actionObj.dispatch(payload);\n  if (data === undefined) return null;\n\n  var type = actionObj.id;\n  var namespace = type;\n  var name = type;\n  var details = { id: type, namespace: namespace, name: name };\n\n  var dispatchLater = function dispatchLater(x) {\n    return alt.dispatch(type, x, details);\n  };\n\n  if (fn.isFunction(data)) return data(dispatchLater, alt);\n\n  // XXX standardize this\n  return alt.dispatcher.dispatch(fsa(id, type, data, details));\n}\n\n/* istanbul ignore next */\nfunction NoopClass() {}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setAppState = setAppState;\nexports.snapshot = snapshot;\nexports.saveInitialSnapshot = saveInitialSnapshot;\nexports.filterSnapshots = filterSnapshots;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction setAppState(instance, data, onStore) {\n  var obj = instance.deserialize(data);\n  fn.eachObject(function (key, value) {\n    var store = instance.stores[key];\n    if (store) {\n      (function () {\n        var config = store.StoreModel.config;\n\n        var state = store.state;\n        if (config.onDeserialize) obj[key] = config.onDeserialize(value) || value;\n        if (fn.isMutableObject(state)) {\n          fn.eachObject(function (k) {\n            return delete state[k];\n          }, [state]);\n          fn.assign(state, obj[key]);\n        } else {\n          store.state = obj[key];\n        }\n        onStore(store, store.state);\n      })();\n    }\n  }, [obj]);\n}\n\nfunction snapshot(instance) {\n  var storeNames = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n  var stores = storeNames.length ? storeNames : Object.keys(instance.stores);\n  return stores.reduce(function (obj, storeHandle) {\n    var storeName = storeHandle.displayName || storeHandle;\n    var store = instance.stores[storeName];\n    var config = store.StoreModel.config;\n\n    store.lifecycle('snapshot');\n    var customSnapshot = config.onSerialize && config.onSerialize(store.state);\n    obj[storeName] = customSnapshot ? customSnapshot : store.getState();\n    return obj;\n  }, {});\n}\n\nfunction saveInitialSnapshot(instance, key) {\n  var state = instance.deserialize(instance.serialize(instance.stores[key].state));\n  instance._initSnapshot[key] = state;\n  instance._lastSnapshot[key] = state;\n}\n\nfunction filterSnapshots(instance, state, stores) {\n  return stores.reduce(function (obj, store) {\n    var storeName = store.displayName || store;\n    if (!state[storeName]) {\n      throw new ReferenceError(String(storeName) + ' is not a valid store');\n    }\n    obj[storeName] = state[storeName];\n    return obj;\n  }, {});\n}","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","/**\n * Copyright (c) 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nmodule.exports.Dispatcher = require('./lib/Dispatcher');\n","/**\n * Copyright (c) 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Dispatcher\n * \n * @preventMunge\n */\n\n'use strict';\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar _prefix = 'ID_';\n\n/**\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\n * different from generic pub-sub systems in two ways:\n *\n *   1) Callbacks are not subscribed to particular events. Every payload is\n *      dispatched to every registered callback.\n *   2) Callbacks can be deferred in whole or part until other callbacks have\n *      been executed.\n *\n * For example, consider this hypothetical flight destination form, which\n * selects a default city when a country is selected:\n *\n *   var flightDispatcher = new Dispatcher();\n *\n *   // Keeps track of which country is selected\n *   var CountryStore = {country: null};\n *\n *   // Keeps track of which city is selected\n *   var CityStore = {city: null};\n *\n *   // Keeps track of the base flight price of the selected city\n *   var FlightPriceStore = {price: null}\n *\n * When a user changes the selected city, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'city-update',\n *     selectedCity: 'paris'\n *   });\n *\n * This payload is digested by `CityStore`:\n *\n *   flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'city-update') {\n *       CityStore.city = payload.selectedCity;\n *     }\n *   });\n *\n * When the user selects a country, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'country-update',\n *     selectedCountry: 'australia'\n *   });\n *\n * This payload is digested by both stores:\n *\n *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       CountryStore.country = payload.selectedCountry;\n *     }\n *   });\n *\n * When the callback to update `CountryStore` is registered, we save a reference\n * to the returned token. Using this token with `waitFor()`, we can guarantee\n * that `CountryStore` is updated before the callback that updates `CityStore`\n * needs to query its data.\n *\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       // `CountryStore.country` may not be updated.\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\n *       // `CountryStore.country` is now guaranteed to be updated.\n *\n *       // Select the default city for the new country\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\n *     }\n *   });\n *\n * The usage of `waitFor()` can be chained, for example:\n *\n *   FlightPriceStore.dispatchToken =\n *     flightDispatcher.register(function(payload) {\n *       switch (payload.actionType) {\n *         case 'country-update':\n *         case 'city-update':\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\n *           FlightPriceStore.price =\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\n *           break;\n *     }\n *   });\n *\n * The `country-update` payload will be guaranteed to invoke the stores'\n * registered callbacks in order: `CountryStore`, `CityStore`, then\n * `FlightPriceStore`.\n */\n\nvar Dispatcher = (function () {\n  function Dispatcher() {\n    _classCallCheck(this, Dispatcher);\n\n    this._callbacks = {};\n    this._isDispatching = false;\n    this._isHandled = {};\n    this._isPending = {};\n    this._lastID = 1;\n  }\n\n  /**\n   * Registers a callback to be invoked with every dispatched payload. Returns\n   * a token that can be used with `waitFor()`.\n   */\n\n  Dispatcher.prototype.register = function register(callback) {\n    var id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n    return id;\n  };\n\n  /**\n   * Removes a callback based on its token.\n   */\n\n  Dispatcher.prototype.unregister = function unregister(id) {\n    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\n    delete this._callbacks[id];\n  };\n\n  /**\n   * Waits for the callbacks specified to be invoked before continuing execution\n   * of the current callback. This method should only be used by a callback in\n   * response to a dispatched payload.\n   */\n\n  Dispatcher.prototype.waitFor = function waitFor(ids) {\n    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;\n    for (var ii = 0; ii < ids.length; ii++) {\n      var id = ids[ii];\n      if (this._isPending[id]) {\n        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;\n        continue;\n      }\n      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\n      this._invokeCallback(id);\n    }\n  };\n\n  /**\n   * Dispatches a payload to all registered callbacks.\n   */\n\n  Dispatcher.prototype.dispatch = function dispatch(payload) {\n    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;\n    this._startDispatching(payload);\n    try {\n      for (var id in this._callbacks) {\n        if (this._isPending[id]) {\n          continue;\n        }\n        this._invokeCallback(id);\n      }\n    } finally {\n      this._stopDispatching();\n    }\n  };\n\n  /**\n   * Is this Dispatcher currently dispatching.\n   */\n\n  Dispatcher.prototype.isDispatching = function isDispatching() {\n    return this._isDispatching;\n  };\n\n  /**\n   * Call the callback stored with the given id. Also do some internal\n   * bookkeeping.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {\n    this._isPending[id] = true;\n    this._callbacks[id](this._pendingPayload);\n    this._isHandled[id] = true;\n  };\n\n  /**\n   * Set up bookkeeping needed when dispatching.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {\n    for (var id in this._callbacks) {\n      this._isPending[id] = false;\n      this._isHandled[id] = false;\n    }\n    this._pendingPayload = payload;\n    this._isDispatching = true;\n  };\n\n  /**\n   * Clear bookkeeping used for dispatching.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._stopDispatching = function _stopDispatching() {\n    delete this._pendingPayload;\n    this._isDispatching = false;\n  };\n\n  return Dispatcher;\n})();\n\nmodule.exports = Dispatcher;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n\"use strict\";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function (condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;","/**\n * Indicates that navigation was caused by a call to history.push.\n */\n'use strict';\n\nexports.__esModule = true;\nvar PUSH = 'PUSH';\n\nexports.PUSH = PUSH;\n/**\n * Indicates that navigation was caused by a call to history.replace.\n */\nvar REPLACE = 'REPLACE';\n\nexports.REPLACE = REPLACE;\n/**\n * Indicates that navigation was caused by some other action such\n * as using a browser's back/forward buttons and/or manually manipulating\n * the URL in a browser's location bar. This is the default.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\n * for more information.\n */\nvar POP = 'POP';\n\nexports.POP = POP;\nexports['default'] = {\n  PUSH: PUSH,\n  REPLACE: REPLACE,\n  POP: POP\n};","\"use strict\";\n\nexports.__esModule = true;\nexports.loopAsync = loopAsync;\n\nfunction loopAsync(turns, work, callback) {\n  var currentTurn = 0;\n  var isDone = false;\n\n  function done() {\n    isDone = true;\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) return;\n\n    if (currentTurn < turns) {\n      work.call(this, currentTurn++, next, done);\n    } else {\n      done.apply(this, arguments);\n    }\n  }\n\n  next();\n}","/*eslint-disable no-empty */\n'use strict';\n\nexports.__esModule = true;\nexports.saveState = saveState;\nexports.readState = readState;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar KeyPrefix = '@@History/';\nvar QuotaExceededError = 'QuotaExceededError';\nvar SecurityError = 'SecurityError';\n\nfunction createKey(key) {\n  return KeyPrefix + key;\n}\n\nfunction saveState(key, state) {\n  try {\n    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;\n\n      return;\n    }\n\n    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {\n      // Safari \"private mode\" throws QuotaExceededError.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;\n\n      return;\n    }\n\n    throw error;\n  }\n}\n\nfunction readState(key) {\n  var json = undefined;\n  try {\n    json = window.sessionStorage.getItem(createKey(key));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;\n\n      return null;\n    }\n  }\n\n  if (json) {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      // Ignore invalid JSON.\n    }\n  }\n\n  return null;\n}","'use strict';\n\nexports.__esModule = true;\nexports.addEventListener = addEventListener;\nexports.removeEventListener = removeEventListener;\nexports.getHashPath = getHashPath;\nexports.replaceHashPath = replaceHashPath;\nexports.getWindowPath = getWindowPath;\nexports.go = go;\nexports.getUserConfirmation = getUserConfirmation;\nexports.supportsHistory = supportsHistory;\nexports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;\n\nfunction addEventListener(node, event, listener) {\n  if (node.addEventListener) {\n    node.addEventListener(event, listener, false);\n  } else {\n    node.attachEvent('on' + event, listener);\n  }\n}\n\nfunction removeEventListener(node, event, listener) {\n  if (node.removeEventListener) {\n    node.removeEventListener(event, listener, false);\n  } else {\n    node.detachEvent('on' + event, listener);\n  }\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  return window.location.href.split('#')[1] || '';\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(window.location.pathname + window.location.search + '#' + path);\n}\n\nfunction getWindowPath() {\n  return window.location.pathname + window.location.search + window.location.hash;\n}\n\nfunction go(n) {\n  if (n) window.history.go(n);\n}\n\nfunction getUserConfirmation(message, callback) {\n  callback(window.confirm(message));\n}\n\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\n    return false;\n  }\n  // FIXME: Work around our browser history not working correctly on Chrome\n  // iOS: https://github.com/rackt/react-router/issues/2565\n  if (ua.indexOf('CriOS') !== -1) {\n    return false;\n  }\n  return window.history && 'pushState' in window.history;\n}\n\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  var ua = navigator.userAgent;\n  return ua.indexOf('Firefox') === -1;\n}","'use strict';\n\nexports.__esModule = true;\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexports.canUseDOM = canUseDOM;","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _Actions = require('./Actions');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _DOMStateStorage = require('./DOMStateStorage');\n\nvar _createDOMHistory = require('./createDOMHistory');\n\nvar _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\n/**\n * Creates and returns a history object that uses HTML5's history API\n * (pushState, replaceState, and the popstate event) to manage history.\n * This is the recommended method of managing history in browsers because\n * it provides the cleanest URLs.\n *\n * Note: In browsers that do not support the HTML5 history API full\n * page reloads will be used to preserve URLs.\n */\nfunction createBrowserHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;\n\n  var forceRefresh = options.forceRefresh;\n\n  var isSupported = _DOMUtils.supportsHistory();\n  var useRefresh = !isSupported || forceRefresh;\n\n  function getCurrentLocation(historyState) {\n    historyState = historyState || window.history.state || {};\n\n    var path = _DOMUtils.getWindowPath();\n    var _historyState = historyState;\n    var key = _historyState.key;\n\n    var state = undefined;\n    if (key) {\n      state = _DOMStateStorage.readState(key);\n    } else {\n      state = null;\n      key = history.createKey();\n\n      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);\n    }\n\n    var location = _parsePath2['default'](path);\n\n    return history.createLocation(_extends({}, location, { state: state }), undefined, key);\n  }\n\n  function startPopStateListener(_ref) {\n    var transitionTo = _ref.transitionTo;\n\n    function popStateListener(event) {\n      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.\n\n      transitionTo(getCurrentLocation(event.state));\n    }\n\n    _DOMUtils.addEventListener(window, 'popstate', popStateListener);\n\n    return function () {\n      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);\n    };\n  }\n\n  function finishTransition(location) {\n    var basename = location.basename;\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n    var state = location.state;\n    var action = location.action;\n    var key = location.key;\n\n    if (action === _Actions.POP) return; // Nothing to do.\n\n    _DOMStateStorage.saveState(key, state);\n\n    var path = (basename || '') + pathname + search + hash;\n    var historyState = {\n      key: key\n    };\n\n    if (action === _Actions.PUSH) {\n      if (useRefresh) {\n        window.location.href = path;\n        return false; // Prevent location update.\n      } else {\n          window.history.pushState(historyState, null, path);\n        }\n    } else {\n      // REPLACE\n      if (useRefresh) {\n        window.location.replace(path);\n        return false; // Prevent location update.\n      } else {\n          window.history.replaceState(historyState, null, path);\n        }\n    }\n  }\n\n  var history = _createDOMHistory2['default'](_extends({}, options, {\n    getCurrentLocation: getCurrentLocation,\n    finishTransition: finishTransition,\n    saveState: _DOMStateStorage.saveState\n  }));\n\n  var listenerCount = 0,\n      stopPopStateListener = undefined;\n\n  function listenBefore(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listenBefore(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  function listen(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listen(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    history.registerTransitionHook(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    history.unregisterTransitionHook(hook);\n\n    if (--listenerCount === 0) stopPopStateListener();\n  }\n\n  return _extends({}, history, {\n    listenBefore: listenBefore,\n    listen: listen,\n    registerTransitionHook: registerTransitionHook,\n    unregisterTransitionHook: unregisterTransitionHook\n  });\n}\n\nexports['default'] = createBrowserHistory;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _createHistory = require('./createHistory');\n\nvar _createHistory2 = _interopRequireDefault(_createHistory);\n\nfunction createDOMHistory(options) {\n  var history = _createHistory2['default'](_extends({\n    getUserConfirmation: _DOMUtils.getUserConfirmation\n  }, options, {\n    go: _DOMUtils.go\n  }));\n\n  function listen(listener) {\n    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;\n\n    return history.listen(listener);\n  }\n\n  return _extends({}, history, {\n    listen: listen\n  });\n}\n\nexports['default'] = createDOMHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _deepEqual = require('deep-equal');\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _AsyncUtils = require('./AsyncUtils');\n\nvar _Actions = require('./Actions');\n\nvar _createLocation2 = require('./createLocation');\n\nvar _createLocation3 = _interopRequireDefault(_createLocation2);\n\nvar _runTransitionHook = require('./runTransitionHook');\n\nvar _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nvar _deprecate = require('./deprecate');\n\nvar _deprecate2 = _interopRequireDefault(_deprecate);\n\nfunction createRandomKey(length) {\n  return Math.random().toString(36).substr(2, length);\n}\n\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search &&\n  //a.action === b.action && // Different action !== location change.\n  a.key === b.key && _deepEqual2['default'](a.state, b.state);\n}\n\nvar DefaultKeyLength = 6;\n\nfunction createHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var getCurrentLocation = options.getCurrentLocation;\n  var finishTransition = options.finishTransition;\n  var saveState = options.saveState;\n  var go = options.go;\n  var keyLength = options.keyLength;\n  var getUserConfirmation = options.getUserConfirmation;\n\n  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;\n\n  var transitionHooks = [];\n\n  function listenBefore(hook) {\n    transitionHooks.push(hook);\n\n    return function () {\n      transitionHooks = transitionHooks.filter(function (item) {\n        return item !== hook;\n      });\n    };\n  }\n\n  var allKeys = [];\n  var changeListeners = [];\n  var location = undefined;\n\n  function getCurrent() {\n    if (pendingLocation && pendingLocation.action === _Actions.POP) {\n      return allKeys.indexOf(pendingLocation.key);\n    } else if (location) {\n      return allKeys.indexOf(location.key);\n    } else {\n      return -1;\n    }\n  }\n\n  function updateLocation(newLocation) {\n    var current = getCurrent();\n\n    location = newLocation;\n\n    if (location.action === _Actions.PUSH) {\n      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);\n    } else if (location.action === _Actions.REPLACE) {\n      allKeys[current] = location.key;\n    }\n\n    changeListeners.forEach(function (listener) {\n      listener(location);\n    });\n  }\n\n  function listen(listener) {\n    changeListeners.push(listener);\n\n    if (location) {\n      listener(location);\n    } else {\n      var _location = getCurrentLocation();\n      allKeys = [_location.key];\n      updateLocation(_location);\n    }\n\n    return function () {\n      changeListeners = changeListeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function confirmTransitionTo(location, callback) {\n    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {\n      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {\n        if (result != null) {\n          done(result);\n        } else {\n          next();\n        }\n      });\n    }, function (message) {\n      if (getUserConfirmation && typeof message === 'string') {\n        getUserConfirmation(message, function (ok) {\n          callback(ok !== false);\n        });\n      } else {\n        callback(message !== false);\n      }\n    });\n  }\n\n  var pendingLocation = undefined;\n\n  function transitionTo(nextLocation) {\n    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.\n\n    pendingLocation = nextLocation;\n\n    confirmTransitionTo(nextLocation, function (ok) {\n      if (pendingLocation !== nextLocation) return; // Transition was interrupted.\n\n      if (ok) {\n        // treat PUSH to current path like REPLACE to be consistent with browsers\n        if (nextLocation.action === _Actions.PUSH) {\n          var prevPath = createPath(location);\n          var nextPath = createPath(nextLocation);\n\n          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;\n        }\n\n        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);\n      } else if (location && nextLocation.action === _Actions.POP) {\n        var prevIndex = allKeys.indexOf(location.key);\n        var nextIndex = allKeys.indexOf(nextLocation.key);\n\n        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.\n      }\n    });\n  }\n\n  function push(location) {\n    transitionTo(createLocation(location, _Actions.PUSH, createKey()));\n  }\n\n  function replace(location) {\n    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function createKey() {\n    return createRandomKey(keyLength);\n  }\n\n  function createPath(location) {\n    if (location == null || typeof location === 'string') return location;\n\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n\n    var result = pathname;\n\n    if (search) result += search;\n\n    if (hash) result += hash;\n\n    return result;\n  }\n\n  function createHref(location) {\n    return createPath(location);\n  }\n\n  function createLocation(location, action) {\n    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];\n\n    if (typeof action === 'object') {\n      //warning(\n      //  false,\n      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +\n      //  'location descriptor instead'\n      //)\n\n      if (typeof location === 'string') location = _parsePath2['default'](location);\n\n      location = _extends({}, location, { state: action });\n\n      action = key;\n      key = arguments[3] || createKey();\n    }\n\n    return _createLocation3['default'](location, action, key);\n  }\n\n  // deprecated\n  function setState(state) {\n    if (location) {\n      updateLocationState(location, state);\n      updateLocation(location);\n    } else {\n      updateLocationState(getCurrentLocation(), state);\n    }\n  }\n\n  function updateLocationState(location, state) {\n    location.state = _extends({}, location.state, state);\n    saveState(location.key, location.state);\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    transitionHooks = transitionHooks.filter(function (item) {\n      return item !== hook;\n    });\n  }\n\n  // deprecated\n  function pushState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    push(_extends({ state: state }, path));\n  }\n\n  // deprecated\n  function replaceState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    replace(_extends({ state: state }, path));\n  }\n\n  return {\n    listenBefore: listenBefore,\n    listen: listen,\n    transitionTo: transitionTo,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    createKey: createKey,\n    createPath: createPath,\n    createHref: createHref,\n    createLocation: createLocation,\n\n    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),\n    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),\n    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),\n    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),\n    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')\n  };\n}\n\nexports['default'] = createHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _Actions = require('./Actions');\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nfunction createLocation() {\n  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];\n  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];\n  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n  if (typeof location === 'string') location = _parsePath2['default'](location);\n\n  if (typeof action === 'object') {\n    //warning(\n    //  false,\n    //  'The state (2nd) argument to createLocation is deprecated; use a ' +\n    //  'location descriptor instead'\n    //)\n\n    location = _extends({}, location, { state: action });\n\n    action = key || _Actions.POP;\n    key = _fourthArg;\n  }\n\n  var pathname = location.pathname || '/';\n  var search = location.search || '';\n  var hash = location.hash || '';\n  var state = location.state || null;\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash,\n    state: state,\n    action: action,\n    key: key\n  };\n}\n\nexports['default'] = createLocation;\nmodule.exports = exports['default'];","//import warning from 'warning'\n\n\"use strict\";\n\nexports.__esModule = true;\nfunction deprecate(fn) {\n  return fn;\n  //return function () {\n  //  warning(false, '[history] ' + message)\n  //  return fn.apply(this, arguments)\n  //}\n}\n\nexports[\"default\"] = deprecate;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\nfunction extractPath(string) {\n  var match = string.match(/^https?:\\/\\/[^\\/]*/);\n\n  if (match == null) return string;\n\n  return string.substring(match[0].length);\n}\n\nexports[\"default\"] = extractPath;\nmodule.exports = exports[\"default\"];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _extractPath = require('./extractPath');\n\nvar _extractPath2 = _interopRequireDefault(_extractPath);\n\nfunction parsePath(path) {\n  var pathname = _extractPath2['default'](path);\n  var search = '';\n  var hash = '';\n\n  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like \"%s\"', path) : undefined;\n\n  var hashIndex = pathname.indexOf('#');\n  if (hashIndex !== -1) {\n    hash = pathname.substring(hashIndex);\n    pathname = pathname.substring(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n  if (searchIndex !== -1) {\n    search = pathname.substring(searchIndex);\n    pathname = pathname.substring(0, searchIndex);\n  }\n\n  if (pathname === '') pathname = '/';\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash\n  };\n}\n\nexports['default'] = parsePath;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction runTransitionHook(hook, location, callback) {\n  var result = hook(location, callback);\n\n  if (hook.length < 2) {\n    // Assume the hook runs synchronously and automatically\n    // call the callback with the return value.\n    callback(result);\n  } else {\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not \"return\" in a transition hook with a callback argument; call the callback instead') : undefined;\n  }\n}\n\nexports['default'] = runTransitionHook;\nmodule.exports = exports['default'];","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\n\nfunction transmitter() {\n  var subscriptions = [];\n  var nowDispatching = false;\n  var toUnsubscribe = {};\n\n  var unsubscribe = function unsubscribe(onChange) {\n    var id = subscriptions.indexOf(onChange);\n    if (id < 0) return;\n    if (nowDispatching) {\n      toUnsubscribe[id] = onChange;\n      return;\n    }\n    subscriptions.splice(id, 1);\n  };\n\n  var subscribe = function subscribe(onChange) {\n    var id = subscriptions.push(onChange);\n    var dispose = function dispose() {\n      return unsubscribe(onChange);\n    };\n    return { dispose: dispose };\n  };\n\n  var publish = function publish() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    nowDispatching = true;\n    try {\n      subscriptions.forEach(function (subscription, id) {\n        return toUnsubscribe[id] || subscription.apply(undefined, args);\n      });\n    } finally {\n      nowDispatching = false;\n      Object.keys(toUnsubscribe).forEach(function (id) {\n        return unsubscribe(toUnsubscribe[id]);\n      });\n      toUnsubscribe = {};\n    }\n  };\n\n  return {\n    publish: publish,\n    subscribe: subscribe,\n    $subscriptions: subscriptions\n  };\n}\n\nmodule.exports = transmitter;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n","import alt from '../alt'\r\n\r\nclass FormActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'handleInputChange',\r\n      'handleCommentChange',\r\n      'handleScoreChange',\r\n      'usernameValidationFail',\r\n      'passwordValidationFail',\r\n      'genderValidationFail',\r\n      'firstNameValidationFail',\r\n      'lastNameValidationFail',\r\n      'ageValidationFail',\r\n      'unauthorizedAccessAttempt',\r\n      'commentValidationFail',\r\n      'scoreValidationFail'\r\n    )\r\n  }\r\n}\r\n\r\nexport default alt.createActions(FormActions)\r\n","import alt from '../alt'\r\nimport TMDB from '../utilities/RequesterTMDB'\r\n\r\nclass MovieActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'getTopTenMoviesSuccess',\r\n      'getTopTenMoviesFail',\r\n      'getFiveRecentMoviesSuccess',\r\n      'getFiveRecentMoviesFail',\r\n      'emptyTopTenMovies',\r\n      'addMovieToTopTen',\r\n      'addCommentSuccess',\r\n      'addCommentFail',\r\n      'addVoteSuccess',\r\n      'addVoteFail'\r\n    )\r\n  }\r\n\r\n  getFiveRecentMovies () {\r\n    let request = {\r\n      method: 'get',\r\n      url: '/api/movies/five-recent'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(data => this.getFiveRecentMoviesSuccess(data))\r\n\r\n    return true\r\n  }\r\n\r\n  getTopTenMovies () {\r\n    let request = {\r\n      url: '/api/movies/top-ten',\r\n      method: 'get'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(data => {\r\n        this.emptyTopTenMovies()\r\n        for (let movie of data) {\r\n          let movieData = {\r\n            _id: movie._id,\r\n            name: movie.name,\r\n            description: movie.description,\r\n            genres: movie.genres,\r\n            votes: movie.votes,\r\n            score: movie.score\r\n          }\r\n\r\n          TMDB\r\n            .getMoviePoster(movie.name)\r\n            .then(tmdbResponse => {\r\n              movieData.moviePosterUrl = tmdbResponse.posterUrl\r\n              if (!movieData.description || movieData.description === '') {\r\n                movieData.description = tmdbResponse.overview\r\n              }\r\n\r\n              getComments(movie._id)\r\n                .then(comments => {\r\n                  movieData.comments = comments\r\n\r\n                  getLoggedInUserVote(movie._id)\r\n                    .then(vote => {\r\n                      movieData.loggedInUserScore = vote.voteScore\r\n                      this.addMovieToTopTen(movieData)\r\n                    })\r\n                })\r\n            })\r\n        }\r\n      })\r\n      .fail(error => this.getTopTenMoviesFail(error))\r\n\r\n    return true\r\n  }\r\n\r\n  addComment (movieId, comment) {\r\n    let request = {\r\n      url: `/api/movies/${movieId}/comments`,\r\n      method: 'post',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({content: comment})\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(data => this.addCommentSuccess(data))\r\n      .fail(err => this.addCommentFail(err.responseJSON))\r\n\r\n    return true\r\n  }\r\n\r\n  addVote (movieId, score) {\r\n    let request = {\r\n      url: `/api/movies/${movieId}/vote`,\r\n      method: 'post',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({score})\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(data => {\r\n        data.movieId = movieId\r\n        this.addVoteSuccess(data)\r\n      })\r\n      .fail(err => this.addVoteFail(err.responseJSON))\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default alt.createActions(MovieActions)\r\n\r\nfunction getComments (movieId) {\r\n  return new Promise((resolve, reject) => {\r\n    let request = {\r\n      url: `/api/movies/${movieId}/comments`,\r\n      method: 'get'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(data => resolve(data))\r\n      .fail(err => reject(err))\r\n  })\r\n}\r\n\r\nfunction getLoggedInUserVote (movieId, userId) {\r\n  return new Promise(resolve => {\r\n    let request = {\r\n      method: 'get'\r\n    }\r\n\r\n    if (userId) {\r\n      request.url = `/api/movies/${movieId}/vote?userId=${userId}`\r\n    } else {\r\n      request.url = `/api/movies/${movieId}/vote?user=loggedInUser`\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(data => resolve(data))\r\n  })\r\n}\r\n","import alt from '../alt'\r\n\r\nclass MovieAddActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'handleNameChange',\r\n      'handleDescriptionChange',\r\n      'handleGenresChange',\r\n      'nameValidationFail',\r\n      'genresValidationFail',\r\n      'addMovieSuccess',\r\n      'addMovieFail'\r\n    )\r\n  }\r\n\r\n  addMovie (data) {\r\n    let request = {\r\n      url: '/api/movies/add',\r\n      method: 'POST',\r\n      data: JSON.stringify(data),\r\n      contentType: 'application/json'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(() => {\r\n        this.addMovieSuccess()\r\n      })\r\n      .fail((err) => this.addMovieFail(err))\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default alt.createActions(MovieAddActions)\r\n","import alt from '../alt'\r\n\r\nclass NavbarActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'updateAjaxAnimation'\r\n    )\r\n  }\r\n}\r\n\r\nexport default alt.createActions(NavbarActions)\r\n","import alt from '../alt'\r\n\r\nclass UserActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'registerUserSuccess',\r\n      'registerUserFail',\r\n      'loginUserSuccess',\r\n      'loginUserFail',\r\n      'logoutUserSuccess'\r\n    )\r\n  }\r\n\r\n  registerUser (data) {\r\n    let request = {\r\n      url: '/user/register',\r\n      method: 'post',\r\n      data: JSON.stringify(data),\r\n      contentType: 'application/json'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(() => this.registerUserSuccess())\r\n      .fail(err => {\r\n        this.registerUserFail(err.responseJSON.message)\r\n      })\r\n\r\n    return true\r\n  }\r\n\r\n  loginUser (data) {\r\n    let request = {\r\n      url: '/user/login',\r\n      method: 'post',\r\n      data: JSON.stringify(data),\r\n      contentType: 'application/json'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(user => {\r\n        this.loginUserSuccess(user)\r\n      })\r\n      .fail(err => {\r\n        this.loginUserFail(err.responseJSON)\r\n      })\r\n\r\n    return true\r\n  }\r\n\r\n  logoutUser () {\r\n    let request = {\r\n      url: '/user/logout',\r\n      method: 'post'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(() => {\r\n        this.logoutUserSuccess()\r\n      })\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default alt.createActions(UserActions)\r\n","import Alt from 'alt'\r\n\r\nexport default new Alt()\r\n","import React from 'react'\r\nimport Navbar from './Navbar'\r\nimport Footer from './Footer'\r\nimport UserStore from '../stores/UserStore'\r\n\r\nexport default class App extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = UserStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    UserStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    UserStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        { this.props.children }\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router'\r\nimport MovieActions from '../actions/MovieActions'\r\nimport MovieStore from '../stores/MovieStore'\r\n\r\nclass Footer extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = MovieStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    MovieStore.listen(this.onChange)\r\n    MovieActions.getFiveRecentMovies()\r\n\r\n    this.interval = setInterval(() => MovieActions.getFiveRecentMovies(), 30000)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    MovieStore.unlisten(this.onChange)\r\n    clearInterval(this.interval)\r\n  }\r\n\r\n  render () {\r\n    let mostRecentMovies = this.state.mostRecentMovies.map(movie => {\r\n      return (\r\n        <li key={movie._id}>\r\n          <Link to={`/...`}>{movie.name}</Link>\r\n        </li>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <footer>\r\n        <div className='container'>\r\n          <div className='row'>\r\n            <div className='col-sm-5'>\r\n              <h3 className='lead'><strong>Information</strong> and <strong>Copyright</strong></h3>\r\n              <p>Powered by <strong>Express</strong>, <strong>MongoDB</strong> and <strong>React</strong></p>\r\n              <p>© 2017 SoftUni.</p>\r\n            </div>\r\n            <div className='col-sm-4 hidden-xs'>\r\n              <h3 className='lead'>\r\n                <strong>Newest</strong> 5 Movies\r\n              </h3>\r\n              <ul className='list-inline'>\r\n                {mostRecentMovies}\r\n              </ul>\r\n            </div>\r\n            <div className='col-sm-3'>\r\n              <h3 className='lead'>Author</h3>\r\n              <a href='https://github.com/PeterAsenov22'><strong>Petar Asenov</strong></a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component } from 'react'\r\nimport MovieCard from './sub-components/MovieCard'\r\nimport MovieActions from '../actions/MovieActions'\r\nimport MovieStore from '../stores/MovieStore'\r\n\r\nclass Home extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = MovieStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    MovieStore.listen(this.onChange)\r\n    MovieActions.getTopTenMovies()\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    MovieStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    let movies = this.state.topTenMovies.map((movie, index) => {\r\n      return (\r\n        <MovieCard\r\n          key={movie._id}\r\n          movie={movie}\r\n          index={index} />\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div className='container'>\r\n        <h3 className='text-center'>Welcome to <strong>Movie Database</strong></h3>\r\n        <div className='list-group'>\r\n          {movies}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport MovieAddActions from '../actions/MovieAddActions'\r\nimport MovieAddStore from '../stores/MovieAddStore'\r\n\r\nclass MovieAdd extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = MovieAddStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    MovieAddStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    MovieAddStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n\r\n    let name = this.state.name.trim()\r\n    let genres = this.state.genres\r\n    if (!name) {\r\n      MovieAddActions.nameValidationFail()\r\n    }\r\n    if (genres.length === 0) {\r\n      MovieAddActions.genresValidationFail()\r\n    }\r\n\r\n    if (name) {\r\n      let data = {\r\n        name: this.state.name,\r\n        description: this.state.description,\r\n        genres: this.state.genres\r\n      }\r\n\r\n      MovieAddActions.addMovie(data)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='container'>\r\n        <div className='row flipInX animated'>\r\n          <div className='col-sm-8'>\r\n            <div className='panel panel-default'>\r\n              <div className='panel-heading'>Add Movie</div>\r\n              <div className='panel-body'>\r\n                <form onSubmit={this.handleSubmit.bind(this)}>\r\n                  <div className={'form-group ' + this.state.nameValidationState}>\r\n                    <label className='control-label'>Name</label>\r\n                    <input type='text' className='form-control' ref='nameTextField'\r\n                      value={this.state.name}\r\n                      onChange={MovieAddActions.handleNameChange} autoFocus />\r\n                    <span className='help-block'>{ this.state.helpBlock }</span>\r\n                  </div>\r\n                  <div className='form-group'>\r\n                    <label className='control-label'>Description</label>\r\n                    <textarea className='form-control'\r\n                      rows='5'\r\n                      value={this.state.description}\r\n                      onChange={MovieAddActions.handleDescriptionChange} />\r\n                  </div>\r\n                  <div className={'form-group ' + this.state.genresValidationState}>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='action' value='Action'\r\n                        checked={this.state.genres.indexOf('Action') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='action'>Action</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='horror' value='Horror'\r\n                        checked={this.state.genres.indexOf('Horror') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='horror'>Horror</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='sci-fi' value='Sci-fi'\r\n                        checked={this.state.genres.indexOf('Sci-fi') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='sci-fi'>Sci-fi</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='fantasy' value='Fantasy'\r\n                        checked={this.state.genres.indexOf('Fantasy') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='fantasy'>Fantasy</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='romance' value='Romance'\r\n                        checked={this.state.genres.indexOf('Romance') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='romance'>Romance</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='thriller' value='Thriller'\r\n                        checked={this.state.genres.indexOf('Thriller') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='thriller'>Thriller</label>\r\n                    </div>\r\n                    <div className='checkbox checkbox-inline'>\r\n                      <input type='checkbox' name='genres' id='adventure' value='Adventure'\r\n                        checked={this.state.genres.indexOf('Adventure') !== -1}\r\n                        onChange={MovieAddActions.handleGenresChange} />\r\n                      <label htmlFor='adventure'>Adventure</label>\r\n                    </div>\r\n                  </div>\r\n                  <button type='submit' className='btn btn-primary'>Submit</button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieAdd\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router'\r\nimport NavbarActions from '../actions/NavbarActions'\r\nimport NavbarStore from '../stores/NavbarStore'\r\nimport NavbarUserMenu from './sub-components/NavbarUserMenu'\r\n\r\nclass Navbar extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = NavbarStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    NavbarStore.listen(this.onChange)\r\n\r\n    $(document).ajaxStart(() => NavbarActions.updateAjaxAnimation('fadeIn'))\r\n    $(document).ajaxComplete(() => NavbarActions.updateAjaxAnimation('fadeOut'))\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    NavbarStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <nav className='navbar navbar-default navbar-static-top'>\r\n        <div className='navbar-header'>\r\n          <button type='button'\r\n            className='navbar-toggle collapsed'\r\n            data-toggle='collapse'\r\n            data-target='#navbar'>\r\n            <span className='sr-only'>Toggle navigation</span>\r\n            <span className='icon-bar' />\r\n            <span className='icon-bar' />\r\n            <span className='icon-bar' />\r\n          </button>\r\n          <Link to='/' className='navbar-brand'>\r\n            <span ref='triangles' className={'triangles animated' + this.state.ajaxAnimationClass}>\r\n              <div className='tri invert' />\r\n              <div className='tri invert' />\r\n              <div className='tri' />\r\n              <div className='tri invert' />\r\n              <div className='tri invert' />\r\n              <div className='tri' />\r\n              <div className='tri invert' />\r\n              <div className='tri' />\r\n              <div className='tri invert' />\r\n            </span>\r\n            MDB\r\n          </Link>\r\n        </div>\r\n        <div id='navbar' className='navbar-collapse collapse'>\r\n          <ul className='nav navbar-nav'>\r\n            <li>\r\n              <Link to='/'>Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/movie/add'>Add Movie</Link>\r\n            </li>\r\n          </ul>\r\n          <NavbarUserMenu />\r\n        </div>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navbar\r\n","import React, {Component} from 'react'\r\nimport FormStore from '../stores/FormStore'\r\nimport FormActions from '../actions/FormActions'\r\nimport UserActions from '../actions/UserActions'\r\nimport Form from './form/Form'\r\nimport TextGroup from './form/TextGroup'\r\nimport Submit from './form/Submit'\r\n\r\nclass UserLogin extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = FormStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    FormStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    FormStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (event) {\r\n    event.preventDefault()\r\n\r\n    let username = this.state.user.username\r\n    let password = this.state.user.password\r\n\r\n    if (!username) {\r\n      return FormActions.usernameValidationFail()\r\n    }\r\n\r\n    if (!password) {\r\n      return FormActions.passwordValidationFail('Enter password')\r\n    }\r\n\r\n    UserActions.loginUser({username, password})\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Form\r\n        title='Login'\r\n        handleSubmit={this.handleSubmit.bind(this)}\r\n        submitState={this.state.formSubmitState}\r\n        message={this.state.message}>\r\n\r\n        <TextGroup\r\n          type='text'\r\n          name='username'\r\n          label='Username'\r\n          value={this.state.user.username}\r\n          onChange={FormActions.handleInputChange}\r\n          validationState={this.state.usernameValidationState} />\r\n\r\n        <TextGroup\r\n          type='password'\r\n          name='password'\r\n          value={this.state.user.password}\r\n          label='Password'\r\n          onChange={FormActions.handleInputChange}\r\n          validationState={this.state.passwordValidationState}\r\n          message={this.state.message} />\r\n\r\n        <Submit type='btn-primary' value='Login' />\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserLogin\r\n","import React, {Component} from 'react'\r\nimport UserStore from '../stores/UserStore'\r\nimport UserInfo from '../components/sub-components/UserInfo'\r\nimport UserRatedMovies from '../components/sub-components/UserRatedMovies'\r\nimport UserReviews from '../components/sub-components/UserReviews'\r\n\r\nclass UserProfile extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = UserStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    UserStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    UserStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <UserInfo username={this.state.name} roles={this.state.roles} />\r\n        <UserRatedMovies votes={this.state.votes} />\r\n        <UserReviews reviews={this.state.reviews} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserProfile\r\n","import React, {Component} from 'react'\r\nimport FormStore from '../stores/FormStore'\r\nimport FormActions from '../actions/FormActions'\r\nimport UserActions from '../actions/UserActions'\r\nimport Form from '../components/form/Form'\r\nimport TextGroup from '../components/form/TextGroup'\r\nimport RadioGroup from '../components/form/RadioGroup'\r\nimport RadioElement from '../components/form/RadioElement'\r\nimport Submit from '../components/form/Submit'\r\n\r\nclass UserRegister extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = FormStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    FormStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    FormStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (event) {\r\n    event.preventDefault()\r\n\r\n    let data = {\r\n      username: this.state.user.username,\r\n      password: this.state.user.password,\r\n      confirmedPassword: this.state.user.confirmedPassword,\r\n      firstName: this.state.user.firstName,\r\n      lastName: this.state.user.lastName,\r\n      age: this.state.user.age,\r\n      gender: this.state.user.gender\r\n    }\r\n\r\n    if (!data.username) {\r\n      return FormActions.usernameValidationFail()\r\n    }\r\n\r\n    if (!data.password ||\r\n       !data.confirmedPassword ||\r\n        data.password !== data.confirmedPassword) {\r\n      return FormActions.passwordValidationFail('Invalid password, or passwords do not match')\r\n    }\r\n\r\n    if (!data.firstName || data.firstName.length < 2) {\r\n      return FormActions.firstNameValidationFail()\r\n    }\r\n\r\n    if (!data.lastName || data.lastName.length < 2) {\r\n      return FormActions.lastNameValidationFail()\r\n    }\r\n\r\n    if (!data.age || parseInt(data.age) < 0 || parseInt(data.age) > 120) {\r\n      return FormActions.ageValidationFail()\r\n    }\r\n\r\n    if (data.gender !== 'Male' && data.gender !== 'Female') {\r\n      return FormActions.genderValidationFail()\r\n    }\r\n\r\n    UserActions.registerUser(data)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Form\r\n        title='Register'\r\n        handleSubmit={this.handleSubmit.bind(this)}\r\n        submitState={this.state.formSubmitState}\r\n        message={this.state.message}>\r\n        <TextGroup\r\n          type='text'\r\n          name='username'\r\n          label='Username'\r\n          value={this.state.user.username}\r\n          autoFocus\r\n          onChange={FormActions.handleInputChange}\r\n          validationState={this.state.usernameValidationState}\r\n          message={this.state.message} />\r\n\r\n        <TextGroup\r\n          type='password'\r\n          name='password'\r\n          label='Password'\r\n          value={this.state.user.password}\r\n          onChange={FormActions.handleInputChange}\r\n          validationState={this.state.passwordValidationState}\r\n          message={this.state.message} />\r\n\r\n        <TextGroup\r\n          type='password'\r\n          name='confirmedPassword'\r\n          label='Confirm Password'\r\n          value={this.state.user.confirmedPassword}\r\n          onChange={FormActions.handleInputChange}\r\n          validationState={this.state.passwordValidationState}\r\n          message={this.state.message} />\r\n\r\n        <TextGroup\r\n          type='text'\r\n          name='firstName'\r\n          label='First Name'\r\n          onChange={FormActions.handleInputChange}\r\n          value={this.state.user.firstName}\r\n          validationState={this.state.firstNameValidationState}\r\n          message={this.state.message} />\r\n\r\n        <TextGroup\r\n          type='text'\r\n          name='lastName'\r\n          label='Last Name'\r\n          onChange={FormActions.handleInputChange}\r\n          value={this.state.user.lastName}\r\n          validationState={this.state.lastNameValidationState}\r\n          message={this.state.message} />\r\n\r\n        <TextGroup\r\n          type='number'\r\n          name='age'\r\n          label='Age'\r\n          onChange={FormActions.handleInputChange}\r\n          value={this.state.user.age}\r\n          validationState={this.state.ageValidationState}\r\n          message={this.state.message} />\r\n\r\n        <RadioGroup\r\n          validationState={this.state.genderValidationState}\r\n          message={this.state.message}>\r\n          <RadioElement\r\n            groupName='gender'\r\n            value='Male'\r\n            selectedValue={this.state.user.gender}\r\n            onChange={FormActions.handleInputChange} />\r\n\r\n          <RadioElement\r\n            groupName='gender'\r\n            value='Female'\r\n            selectedValue={this.state.user.gender}\r\n            onChange={FormActions.handleInputChange} />\r\n        </RadioGroup>\r\n\r\n        <Submit\r\n          type='btn-primary'\r\n          value='Register' />\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserRegister\r\n","import React, {Component} from 'react'\r\nimport FormStore from '../../stores/FormStore'\r\nimport FormActions from '../../actions/FormActions'\r\nimport MovieActions from '../../actions/MovieActions'\r\n\r\nclass CommentForm extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = FormStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    FormStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    FormStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (event) {\r\n    event.preventDefault()\r\n\r\n    if (!this.state.comment) {\r\n      return FormActions.commentValidationFail()\r\n    }\r\n\r\n    MovieActions.addComment(this.props.movieId, this.state.comment)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <form onSubmit={this.handleSubmit.bind(this)} >\r\n        <div className={`form-group ${this.state.commentValidationState}`}>\r\n          <label className='control-label' htmlFor='content'>\r\n            Add comment\r\n          </label>\r\n          <textarea\r\n            id='content'\r\n            className='form-control'\r\n            value={this.state.comment}\r\n            onChange={FormActions.handleCommentChange}\r\n            rows='5' />\r\n          <span className={`help-block`}>\r\n            { this.state.message }\r\n          </span>\r\n        </div>\r\n        <div className='form-group'>\r\n          <input type='submit' className='btn btn-primary' value='Comment' />\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CommentForm\r\n","import React from 'react'\r\n\r\nconst Form = (props) => (\r\n  <div className='container'>\r\n    <div className='row flipInX animated'>\r\n      <div className='col-sm-8'>\r\n        <div className='panel panel-default'>\r\n          <div className='panel-heading'>\r\n            { props.title }\r\n          </div>\r\n          <div className='panel-body'>\r\n            <form onSubmit={props.handleSubmit}>\r\n              <div className={`form-group ${props.submitState}`}>\r\n                <span className={`help-block`}>{ props.message }</span>\r\n              </div>\r\n              { props.children }\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nconst RadioElement = (props) => (\r\n  <div className='radio radio-inline'>\r\n    <input\r\n      type='radio'\r\n      name={props.groupName}\r\n      id={props.value.toLowerCase()}\r\n      value={props.value}\r\n      checked={props.selectedValue === props.value}\r\n      onChange={props.onChange} />\r\n    <label htmlFor={props.value.toLowerCase()}>\r\n      {props.value}\r\n    </label>\r\n  </div>\r\n)\r\n\r\nexport default RadioElement\r\n","import React from 'react'\r\n\r\nconst RadioGroup = (props) => (\r\n  <div className={`form-group ${props.validationState}`}>\r\n    <span className='help-block'>\r\n      {props.message}\r\n    </span>\r\n    {props.children}\r\n  </div>\r\n)\r\n\r\nexport default RadioGroup\r\n","import React from 'react'\r\n\r\nconst Submit = (props) => (\r\n  <input\r\n    type='submit'\r\n    className={`btn ${props.type}`} value={props.value} />\r\n)\r\n\r\nexport default Submit\r\n","import React from 'react'\r\n\r\nconst TextGroup = (props) => (\r\n  <div className={'form-group ' + props.validationState}>\r\n    <label className='control-label'>\r\n      { props.label }\r\n    </label>\r\n    <input\r\n      type={props.type}\r\n      name={props.name}\r\n      className='form-control'\r\n      value={props.value}\r\n      onChange={props.onChange}\r\n      autoFocus={props.autoFocus} />\r\n    <span className='help-block'>\r\n      { props.message }\r\n    </span>\r\n  </div>\r\n)\r\n\r\nexport default TextGroup\r\n","import React, { Component } from 'react'\r\nimport MovieCardInfo from './MovieCardInfo'\r\nimport MovieCardPoster from './MovieCardPoster'\r\nimport MovieCommentsPanel from './MovieCommentsPanel'\r\nimport MovieVotePanel from './MovieVotePanel'\r\nimport MoviePanelToggles from './MoviePanelToggles'\r\n\r\nclass MovieCard extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      showVotePanel: false,\r\n      showCommentsPanel: false\r\n    }\r\n  }\r\n\r\n  toggleCommentsPanel () {\r\n    this.setState(prevState => ({\r\n      showCommentsPanel: !prevState.showCommentsPanel,\r\n      showVotePanel: false\r\n    }))\r\n  }\r\n\r\n  toggleVotePanel () {\r\n    this.setState(prevState => ({\r\n      showVotePanel: !prevState.showVotePanel,\r\n      showCommentsPanel: false\r\n    }))\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='animated fade-in'>\r\n        <div className='media movie'>\r\n          <span className='position pull-left'>{this.props.index + 1}</span>\r\n          <MovieCardPoster moviePosterUrl={this.props.movie.moviePosterUrl} />\r\n          <MovieCardInfo movie={this.props.movie} />\r\n          <MoviePanelToggles\r\n            toggleCommentsPanel={this.toggleCommentsPanel.bind(this)}\r\n            toggleVotePanel={this.toggleVotePanel.bind(this)}\r\n            showCommentsPanel={this.state.showCommentsPanel}\r\n            showVotePanel={this.state.showVotePanel}\r\n            movieId={this.props.movie._id} />\r\n        </div>\r\n        { this.state.showVotePanel ? <MovieVotePanel movieId={this.props.movie._id} /> : null }\r\n        { this.state.showCommentsPanel ?\r\n          <MovieCommentsPanel movieId={this.props.movie._id} comments={this.props.movie.comments} />\r\n          : null }\r\n        <div id='clear' />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieCard\r\n","import React, {Component} from 'react'\r\nimport {Link} from 'react-router'\r\nimport Helpers from '../../utilities/Helpers'\r\n\r\nclass MovieCardInfo extends Component {\r\n  render () {\r\n    let genres = this.props.movie.genres.map(genre => {\r\n      return (\r\n        <strong key={this.props.movie._id + genre}>{genre}</strong>\r\n      )\r\n    })\r\n\r\n    let rating = Helpers.formatMovieRating(this.props.movie.score, this.props.movie.votes)\r\n\r\n    return (\r\n      <div className='media-body'>\r\n        <h4 className='media-heading'>\r\n          <Link to={`/movie/${this.props.movie._id}/${this.props.movie.name}`}>\r\n            {this.props.movie.name}\r\n          </Link>\r\n        </h4>\r\n        <small>Genres: {genres}</small>\r\n        <br />\r\n        <p>{this.props.movie.description}</p>\r\n        <span className='votes'>Votes:\r\n          <strong>{this.props.movie.votes}</strong>\r\n        </span>\r\n        <span className='rating position pull-right'>\r\n          { rating }\r\n          <span className='badge badge-up'>\r\n            { this.props.movie.loggedInUserScore }\r\n          </span>\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieCardInfo\r\n","import React, {Component} from 'react'\r\n\r\nclass MovieCardPoster extends Component {\r\n  render () {\r\n    let poster\r\n    if (this.props.moviePosterUrl) {\r\n      poster = (\r\n        <img className='media-object' src={this.props.moviePosterUrl} />\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className='pull-left thumb-lg'>\r\n        {poster}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieCardPoster\r\n","import React, {Component} from 'react'\r\nimport CommentForm from '../form/CommentForm'\r\n\r\nclass MovieCommentsPanel extends Component {\r\n  render () {\r\n    let comments = this.props.comments.map(comment => {\r\n      return (\r\n        <div\r\n          key={comment._id}\r\n          className='comment col-sm-9 list-group-item animated fadeIn'>\r\n          <div className='media'>\r\n            <div className='media-body'>\r\n              <p>\r\n                { comment.content }\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div className='list-group'>\r\n        <h3 className='col-sm-3'>Comments:</h3>\r\n        {comments}\r\n        <div className='col-sm-6 col-xs-offset-6 list-group-item animated fadeIn'>\r\n          <div className='media'>\r\n            <CommentForm movieId={this.props.movieId} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieCommentsPanel\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router'\r\n\r\nclass MoviePanelToggles extends Component {\r\n  render () {\r\n    return (\r\n      <div className='pull-right btn-group'>\r\n        <a className='btn btn-primary'\r\n          onClick={this.props.toggleCommentsPanel}>\r\n          {this.props.showCommentsPanel ? 'Hide' : 'Comments'}\r\n        </a>\r\n        <a className='btn btn-primary'\r\n          onClick={this.props.toggleVotePanel}>\r\n          {this.props.showVotePanel ? 'Hide' : 'Vote'}\r\n        </a>\r\n        <Link to={`/movie/${this.props.movieId}/review/add`} className='btn btn-warning'>\r\n          Write review\r\n        </Link>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MoviePanelToggles\r\n","import React, {Component} from 'react'\r\nimport FormStore from '../../stores/FormStore'\r\nimport FormActions from '../../actions/FormActions'\r\nimport MovieActions from '../../actions/MovieActions'\r\n\r\nclass MovieVotePanel extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = FormStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    FormStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    FormStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (event) {\r\n    event.preventDefault()\r\n\r\n    if (this.state.score > 10) {\r\n      return FormActions.scoreValidationFail()\r\n    }\r\n\r\n    MovieActions.addVote(this.props.movieId, this.state.score)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='col-sm-4 col-xs-offset-8 list-group-item animated fadeIn vote'>\r\n        <div className='media'>\r\n          <div className='media-body'>\r\n            <div className={`form-group ${this.state.scoreValidationState}`}>\r\n              <span className='help-block'>\r\n                { this.state.message }\r\n              </span>\r\n            </div>\r\n            <form className='form-inline' onSubmit={this.handleSubmit.bind(this)}>\r\n              <div className={`form-group ${this.state.scoreValidationState}`}>\r\n                <label className='control-label'>Score</label>\r\n                <input\r\n                  className='form-control'\r\n                  step='0.1' type='number\"'\r\n                  value={this.state.score || this.props.loggedInUserScore}\r\n                  onChange={FormActions.handleScoreChange} />\r\n                <input\r\n                  className='btn btn-primary'\r\n                  type='submit'\r\n                  value='Vote' />\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieVotePanel\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router'\r\n\r\nimport UserActions from '../../actions/UserActions'\r\nimport UserStore from '../../stores/UserStore'\r\n\r\nclass NavbarUserMenu extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = UserStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    UserStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    UserStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    let userMenu\r\n\r\n    if (!this.state.loggedInUserId) {\r\n      userMenu = (\r\n        <ul className='nav navbar-nav pull-right'>\r\n          <li>\r\n            <Link to='/user/login'>Login</Link>\r\n          </li>\r\n          <li>\r\n            <Link to='/user/register'>Register</Link>\r\n          </li>\r\n        </ul>\r\n      )\r\n    } else {\r\n      userMenu = (\r\n        <ul className='nav navbar-nav pull-right'>\r\n          <li>\r\n            <Link to={`/user/profile/${this.state.loggedInUserId}`}>Profile</Link>\r\n          </li>\r\n          <li>\r\n            <a href='#' onClick={UserActions.logoutUser}>Logout</a>\r\n          </li>\r\n        </ul>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div>{userMenu}</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavbarUserMenu\r\n","import React, {Component} from 'react'\r\n\r\nclass UserInfo extends Component {\r\n  render () {\r\n    let roles\r\n    if (this.props.roles) {\r\n      roles = this.props.roles.map((role, index) => {\r\n        return (\r\n          <h4 key={index} className='lead'>\r\n            <strong>{role}</strong>\r\n          </h4>\r\n        )\r\n      })\r\n    }\r\n\r\n    return (\r\n      <div className='container profile-container'>\r\n        <div className='profile-img'>\r\n          <img src='/images/user-default.png' />\r\n        </div>\r\n        <div className='profile-info clearfix'>\r\n          <h2><strong>{ this.props.username }</strong></h2>\r\n          <h4 className='lead'>Roles:</h4>\r\n          { roles }\r\n          <p>{ this.props.information }</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserInfo\r\n","import React, {Component} from 'react'\r\nimport UserRatedMoviesPanel from '../sub-components/UserRatedMoviesPanel'\r\n\r\nclass UserRatedMovies extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      showRatedMoviesPanel: false\r\n    }\r\n  }\r\n\r\n  toggleRatedMovies () {\r\n    this.setState(prevState => ({\r\n      showRatedMoviesPanel: !prevState.showRatedMoviesPanel\r\n    }))\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='container profile-container'>\r\n        <div className='profile-stats clearfix'>\r\n          <ul>\r\n            <li>\r\n              <span className='stats-number'>{this.props.votes ? this.props.votes.length : 0 }</span>Votes\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className='pull-right btn-group'>\r\n          <a className='btn btn-primary' onClick={this.toggleRatedMovies.bind(this)}>\r\n            { this.state.showRatedMoviesPanel ? 'Hide' : 'Rated Movies' }\r\n          </a>\r\n        </div>\r\n        { this.state.showRatedMoviesPanel ? <UserRatedMoviesPanel movies={this.props.votes} /> : null }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserRatedMovies\r\n","import React, {Component} from 'react'\r\n\r\nclass UserRatedMoviesPanel extends Component {\r\n  render () {\r\n    return (\r\n      <div className='container'>\r\n        <div className='list-group'>\r\n          Hello from UserRatedMoviesPanel\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserRatedMoviesPanel\r\n","import React, {Component} from 'react'\r\nimport UserReviewsPanel from '../sub-components/UserReviewsPanel'\r\n\r\nclass UserReviews extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      showReviewsPanel: false\r\n    }\r\n  }\r\n\r\n  toggleReviews () {\r\n    this.setState(prevState => ({\r\n      showReviewsPanel: !prevState.showReviewsPanel\r\n    }))\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='container profile-container'>\r\n        <div className='profile-stats clearfix'>\r\n          <ul>\r\n            <li><span className='stats-number'>{this.props.reviews ? this.props.reviews.length : 0}</span>Reviews</li>\r\n          </ul>\r\n        </div>\r\n        <div className='pull-right btn-group'>\r\n          <a className='btn btn-primary'\r\n            onClick={this.toggleReviews.bind(this)}>\r\n            { this.state.showReviewsPanel ? 'Hide' : 'Reviews' }\r\n          </a>\r\n        </div>\r\n        { this.state.showReviewsPanel ? <UserReviewsPanel /> : null }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserReviews\r\n","import React, {Component} from 'react'\r\n\r\nclass UserReviewsPanel extends Component {\r\n  render () {\r\n    return (\r\n      <div className='container'>\r\n        <div className='list-group'>\r\n          Hello from UserReviewsPanel\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserReviewsPanel\r\n","import React from 'react'\r\nimport Router from 'react-router'\r\nimport ReactDOM from 'react-dom'\r\nimport createBrowserHistory from 'history/lib/createBrowserHistory'\r\n\r\nimport routes from './routes'\r\n\r\nlet history = createBrowserHistory()\r\n\r\nReactDOM.render(\r\n  <Router history={history}>{ routes }</Router>,\r\n  document.getElementById('app')\r\n)\r\n","import React from 'react'\r\nimport { Route } from 'react-router'\r\n\r\nimport App from './components/App'\r\nimport Home from './components/Home'\r\nimport MovieAdd from './components/MovieAdd'\r\nimport UserProfile from './components/UserProfile'\r\nimport UserRegister from './components/UserRegister'\r\nimport UserLogin from './components/UserLogin'\r\nimport authorize from './utilities/Authorize'\r\n\r\nexport default (\r\n  <Route component={App}>\r\n    <Route path='/' component={Home} />\r\n    <Route path='/movie/add' component={authorize(MovieAdd)} />\r\n    <Route path='/user/profile/:userId' component={authorize(UserProfile)} />\r\n    <Route path='/user/register' component={UserRegister} />\r\n    <Route path='/user/login' component={UserLogin} />\r\n  </Route>\r\n)\r\n","import alt from '../alt'\r\nimport FormActions from '../actions/FormActions'\r\nimport UserActions from '../actions/UserActions'\r\nimport MovieActions from '../actions/MovieActions'\r\n\r\nclass FormStore {\r\n  constructor () {\r\n    this.bindActions(FormActions)\r\n    this.bindListeners({\r\n      onRegisterUserFail: UserActions.registerUserFail,\r\n      onRegisterUserSuccess: UserActions.registerUserSuccess,\r\n      onLoginUserSuccess: UserActions.loginUserSuccess,\r\n      onLoginUserFail: UserActions.loginUserFail,\r\n      onAddCommentFail: MovieActions.addCommentFail,\r\n      onAddCommentSuccess: MovieActions.addCommentSuccess,\r\n      onAddVoteFail: MovieActions.addVoteFail,\r\n      onAddVoteSuccess: MovieActions.addVoteSuccess\r\n    })\r\n\r\n    this.user = {\r\n      username: '',\r\n      password: '',\r\n      confirmedPassword: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      age: '',\r\n      gender: ''\r\n    }\r\n\r\n    this.comment = ''\r\n    this.score = ''\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.firstNameValidationState = ''\r\n    this.lastNameValidationState = ''\r\n    this.ageValidationState = ''\r\n    this.genderValidationState = ''\r\n    this.commentValidationState = ''\r\n    this.scoreValidationState = ''\r\n    this.formSubmitState = ''\r\n    this.message = ''\r\n  }\r\n\r\n  onRegisterUserSuccess () {\r\n    this.formSubmitState = 'has-success'\r\n    this.message = 'User register successful'\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.firstNameValidationState = ''\r\n    this.lastNameValidationState = ''\r\n    this.ageValidationState = ''\r\n    this.genderValidationState = ''\r\n    this.user = {\r\n      username: '',\r\n      password: '',\r\n      confirmedPassword: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      age: '',\r\n      gender: ''\r\n    }\r\n  }\r\n\r\n  onRegisterUserFail (err) {\r\n    if (err.code === 11000) {\r\n      this.usernameValidationState = 'has-error'\r\n      this.message = 'Username already in use'\r\n      this.passwordValidationState = ''\r\n      this.firstNameValidationState = ''\r\n      this.lastNameValidationState = ''\r\n      this.ageValidationState = ''\r\n      this.genderValidationState = ''\r\n      return\r\n    }\r\n\r\n    this.formSubmitState = 'has-error'\r\n    this.message = err.errmsg\r\n  }\r\n\r\n  onLoginUserSuccess () {\r\n    this.formSubmitState = 'has-success'\r\n    this.message = 'User login successful'\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.user = {\r\n      username: '',\r\n      password: '',\r\n      confirmedPassword: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      age: '',\r\n      gender: ''\r\n    }\r\n  }\r\n\r\n  onLoginUserFail (err) {\r\n    this.formSubmitState = 'has-error'\r\n    this.message = err.message\r\n    this.usernameValidationState = 'has-error'\r\n    this.passwordValidationState = 'has-error'\r\n  }\r\n\r\n  onUsernameValidationFail () {\r\n    this.usernameValidationState = 'has-error'\r\n    this.passwordValidationState = ''\r\n    this.firstNameValidationState = ''\r\n    this.lastNameValidationState = ''\r\n    this.ageValidationState = ''\r\n    this.genderValidationState = ''\r\n    this.formSubmitState = ''\r\n    this.message = 'Enter username'\r\n  }\r\n\r\n  onPasswordValidationFail (message) {\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = 'has-error'\r\n    this.firstNameValidationState = ''\r\n    this.lastNameValidationState = ''\r\n    this.ageValidationState = ''\r\n    this.genderValidationState = ''\r\n    this.formSubmitState = ''\r\n    this.message = message\r\n  }\r\n\r\n  onFirstNameValidationFail () {\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.genderValidationState = ''\r\n    this.firstNameValidationState = 'has-error'\r\n    this.lastNameValidationState = ''\r\n    this.ageValidationState = ''\r\n    this.formSubmitState = ''\r\n    this.message = 'First Name should start with capital letter and should be at least 2 letters'\r\n  }\r\n\r\n  onLastNameValidationFail () {\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.genderValidationState = ''\r\n    this.firstNameValidationState = ''\r\n    this.lastNameValidationState = 'has-error'\r\n    this.ageValidationState = ''\r\n    this.formSubmitState = ''\r\n    this.message = 'Last Name should start with capital letter and should be at least 2 letters'\r\n  }\r\n\r\n  onAgeValidationFail () {\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.genderValidationState = ''\r\n    this.firstNameValidationState = ''\r\n    this.lastNameValidationState = ''\r\n    this.ageValidationState = 'has-error'\r\n    this.formSubmitState = ''\r\n    this.message = 'Age should be between 0 and 120'\r\n  }\r\n\r\n  onGenderValidationFail () {\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.firstNameValidationState = ''\r\n    this.lastNameValidationState = ''\r\n    this.ageValidationState = ''\r\n    this.genderValidationState = 'has-error'\r\n    this.formSubmitState = ''\r\n    this.message = 'Gender should be Male or Female. Select one'\r\n  }\r\n\r\n  onCommentValidationFail () {\r\n    this.commentValidationState = 'has-error'\r\n    this.message = 'Please enter comment text'\r\n  }\r\n\r\n  onScoreValidationFail () {\r\n    this.scoreValidationState = 'has-error'\r\n    this.message = 'Valid score is between 0-10'\r\n  }\r\n\r\n  onAddCommentSuccess () {\r\n    this.commentValidationState = ''\r\n    this.message = ''\r\n    this.comment = ''\r\n  }\r\n\r\n  onAddCommentFail (err) {\r\n    this.commentValidationState = 'has-error'\r\n    this.message = err.message\r\n  }\r\n\r\n  onAddVoteSuccess () {\r\n    this.scoreValidationState = ''\r\n    this.message = ''\r\n  }\r\n\r\n  onAddVoteFail (err) {\r\n    this.scoreValidationState = 'has-error'\r\n    this.message = err.message\r\n  }\r\n\r\n  onHandleInputChange (event) {\r\n    this.user[event.target.name] = event.target.value\r\n  }\r\n\r\n  onHandleCommentChange (event) {\r\n    this.comment = event.target.value\r\n  }\r\n\r\n  onHandleScoreChange (event) {\r\n    this.score = event.target.value\r\n  }\r\n\r\n  onUnauthorizedAccessAttempt () {\r\n    this.formSubmitState = 'has-error'\r\n    this.message = 'Please login'\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n  }\r\n}\r\n\r\nexport default alt.createStore(FormStore)\r\n","import alt from '../alt'\r\nimport MovieAddActions from '../actions/MovieAddActions'\r\nimport Helpers from '../utilities/Helpers'\r\n\r\nclass MovieAddStore {\r\n  constructor () {\r\n    this.bindActions(MovieAddActions)\r\n\r\n    this.name = ''\r\n    this.description = ''\r\n    this.genres = []\r\n    this.genresValidationState = ''\r\n    this.nameValidationState = ''\r\n    this.moviePosterUrl = ''\r\n    this.helpBlock = ''\r\n  }\r\n\r\n  onAddMovieSuccess () {\r\n    console.log('Added movie!')\r\n    this.name = ''\r\n    this.description = ''\r\n    this.genres = []\r\n    this.genresValidationState = ''\r\n    this.nameValidationState = ''\r\n    this.moviePosterUrl = ''\r\n    this.helpBlock = ''\r\n  }\r\n\r\n  onAddMovieFail (err) {\r\n    console.log('Failed to add movie', err)\r\n  }\r\n\r\n  onHandleNameChange (e) {\r\n    this.name = e.target.value\r\n    this.nameValidationState = ''\r\n    this.helpBlock = ''\r\n  }\r\n\r\n  onHandleDescriptionChange (e) {\r\n    this.description = e.target.value\r\n    this.genresValidationState = ''\r\n    this.helpBlock = ''\r\n  }\r\n\r\n  onHandleGenresChange (e) {\r\n    let genreValue = e.target.value\r\n    if (this.genres.indexOf(genreValue) === -1) {\r\n      this.genres = Helpers.appendToArray(genreValue, this.genres)\r\n    } else {\r\n      this.genres = Helpers.removeFromArray(genreValue, this.genres)\r\n    }\r\n    this.genresValidationState = ''\r\n    this.helpBlock = ''\r\n  }\r\n\r\n  onNameValidationFail () {\r\n    this.nameValidationState = 'has-error'\r\n    this.helpBlock = 'Enter movie name'\r\n  }\r\n\r\n  onGenresValidationFail () {\r\n    this.genresValidationState = 'has-error'\r\n    this.helpBlock = 'Select at least one movie genre'\r\n  }\r\n}\r\n\r\nexport default alt.createStore(MovieAddStore)\r\n","import alt from '../alt'\r\nimport MovieActions from '../actions/MovieActions'\r\n\r\nclass MovieStore {\r\n  constructor () {\r\n    this.bindActions(MovieActions)\r\n    this.topTenMovies = []\r\n    this.mostRecentMovies = []\r\n  }\r\n\r\n  onAddMovieToTopTen (movie) {\r\n    this.topTenMovies.push(movie)\r\n  }\r\n\r\n  onEmptyTopTenMovies () {\r\n    this.topTenMovies = []\r\n  }\r\n\r\n  onGetTopTenMoviesSuccess (movies) {\r\n    this.topTenMovies = movies\r\n  }\r\n\r\n  onGetTopTenMoviesFail (err) {\r\n    console.log('Could not connect to DB', err)\r\n  }\r\n\r\n  onGetFiveRecentMoviesSuccess (movies) {\r\n    this.mostRecentMovies = movies\r\n  }\r\n\r\n  onGetFiveRecentMoviesFail () {\r\n    console.log('Could not connect to DB')\r\n  }\r\n\r\n  onAddCommentSuccess (data) {\r\n    let comment = data.comment\r\n    let movieId = data.comment.movie\r\n\r\n    for (let i = 0; i < this.topTenMovies.length; i++) {\r\n      if (this.topTenMovies[i]._id === movieId) {\r\n        this.topTenMovies[i].comments.unshift(comment)\r\n      }\r\n    }\r\n\r\n    console.log(this.topTenMovies)\r\n  }\r\n\r\n  onAddVoteSuccess (data) {\r\n    for (let movie of this.topTenMovies) {\r\n      if (movie._id === data.movieId) {\r\n        movie.loggedInUserScore = data.voteScore\r\n        movie.score = data.movieScore\r\n        movie.votes = data.movieVotes\r\n        break\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default alt.createStore(MovieStore)\r\n","import alt from '../alt'\r\nimport NavbarActions from '../actions/NavbarActions'\r\n\r\nclass NavbarStore {\r\n  constructor () {\r\n    this.bindActions(NavbarActions)\r\n\r\n    this.ajaxAnimationClass = ''\r\n  }\r\n\r\n  onUpdateAjaxAnimation (animationClass) {\r\n    this.ajaxAnimationClass = animationClass\r\n  }\r\n}\r\n\r\nexport default alt.createStore(NavbarStore)\r\n","import alt from '../alt'\r\nimport UserActions from '../actions/UserActions'\r\n\r\nclass UserStore {\r\n  constructor () {\r\n    this.bindActions(UserActions)\r\n\r\n    this.loggedInUserId = ''\r\n    this.username = ''\r\n    this.roles = []\r\n  }\r\n\r\n  onLoginUserSuccess (user) {\r\n    this.loggedInUserId = user._id\r\n    this.username = user.username\r\n    this.roles = user.roles\r\n  }\r\n\r\n  onLoginUserFail () {\r\n    console.log('Failed login attempt')\r\n  }\r\n\r\n  onLogoutUserSuccess () {\r\n    this.loggedInUserId = ''\r\n    this.username = ''\r\n    this.roles = []\r\n  }\r\n}\r\n\r\nexport default alt.createStore(UserStore)\r\n","import React, {Component} from 'react'\r\nimport UserStore from '../stores/UserStore'\r\nimport FormActions from '../actions/FormActions'\r\n\r\nexport default function authorize (ChildComponent) {\r\n  return class Authorization extends Component {\r\n    constructor (props) {\r\n      super(props)\r\n\r\n      this.state = UserStore.getState()\r\n      this.onChange = this.onChange.bind(this)\r\n    }\r\n\r\n    onChange (state) {\r\n      this.setState(state)\r\n    }\r\n\r\n    componentWillMount () {\r\n      if (this.state.loggedInUserId === '') {\r\n        this.props.history.pushState(null, '/user/login')\r\n        FormActions.unauthorizedAccessAttempt()\r\n      }\r\n    }\r\n\r\n    componentDidMount () {\r\n      UserStore.listen(this.onChange)\r\n    }\r\n\r\n    componentWillUnmount () {\r\n      UserStore.unlisten(this.onChange)\r\n    }\r\n\r\n    render () {\r\n      return <ChildComponent {...this.props} />\r\n    }\r\n  }\r\n}\r\n","class Helpers {\r\n  static appendToArray (value, array) {\r\n    array.push(value)\r\n    return array\r\n  }\r\n\r\n  static prependToArray (value, array) {\r\n    array.unshift(value)\r\n    return array\r\n  }\r\n\r\n  static removeFromArray (value, array) {\r\n    let index = array.indexOf(value)\r\n    if (index !== -1) {\r\n      array.splice(index, 1)\r\n    }\r\n\r\n    return array\r\n  }\r\n\r\n  static formatMovieRating (score, votes) {\r\n    let rating = score / votes\r\n\r\n    if (isNaN(rating)) {\r\n      rating = 0\r\n    }\r\n\r\n    if (rating % 1 !== 0) {\r\n      rating = rating.toFixed(1)\r\n    }\r\n\r\n    return rating\r\n  }\r\n}\r\n\r\nexport default Helpers\r\n","const API_KEY = '71aabd79c7082bcacabc96877ac7238b'\r\nconst SEARCH_BASE_URL = 'https://api.themoviedb.org/3/search/movie'\r\nconst POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500'\r\nconst UNVERIFIED_MOVIE_POSTER_URL = '/images/movie-unverified.png'\r\nconst MISSING_DATA_POSTER_URL = '/images/movie-missing-data.jpg'\r\n\r\nexport default class RequesterTMDB {\r\n  static getMoviePoster (movieName) {\r\n    return new Promise((resolve, reject) => {\r\n      let request = {\r\n        method: 'get',\r\n        url: `${SEARCH_BASE_URL}?api_key=${API_KEY}&query=${movieName}`\r\n      }\r\n      $.ajax(request)\r\n        .done(tmdbResponse => {\r\n          console.log('TMDB Response', tmdbResponse)\r\n          if (tmdbResponse.total_results === 0) {\r\n            resolve({posterUrl: UNVERIFIED_MOVIE_POSTER_URL})\r\n            return\r\n          }\r\n\r\n          let posterPath = tmdbResponse.results[0].poster_path\r\n          if (posterPath === null) {\r\n            resolve({posterUrl: MISSING_DATA_POSTER_URL})\r\n            return\r\n          }\r\n\r\n          resolve({\r\n            posterUrl: `${POSTER_BASE_URL}/${posterPath}`,\r\n            overview: tmdbResponse.results[0].overview\r\n          })\r\n        })\r\n        .fail(err => {\r\n          reject(err)\r\n        })\r\n    })\r\n  }\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}